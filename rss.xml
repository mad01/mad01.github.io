<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>qone.io</title>
    <link>http://qone.io</link>
    <description>yet another developer blog</description>
    <pubDate>Sun, 21 Aug 2016 00:00:00 +0200</pubDate>
    <item>
      <title>lessons learned by running docker on mesos and aurora in production</title>
      <link>http://qone.io/docker/mesos/aurora/2016/08/21/lessons-learned-by-running-docker-in-production.html</link>
      <description><![CDATA[Short about how we run docker. The way we are running docker using aurora to scedule on mesos currently both on aws and on on premise. Every service have a aurora job defined. When a job is sceduled the service allocates resources from mesos and starts a job. That job is a set of one or multiple docker containers. This is all good and works ok.

]]></description>
      <pubDate>Sun, 21 Aug 2016 00:00:00 +0200</pubDate>
      <guid>http://qone.io/docker/mesos/aurora/2016/08/21/lessons-learned-by-running-docker-in-production.html</guid>
      <content:encoded><![CDATA[<p>Short about how we run docker. The way we are running docker using aurora to scedule on mesos currently both on aws and on on premise. Every service have a aurora job defined. When a job is sceduled the service allocates resources from mesos and starts a job. That job is a set of one or multiple docker containers. This is all good and works ok.</p>

<p>The difficulties with running docker is not the running part. When we are working with life cycle of a service. This means that the amount of stopped containers, old version of images and unused images, and volumes, will start to eat up disk space. This is something that docker have not solved nicely yet. There is a lot of efforts from the community to come up with suggested solutions to purge junk that is building up while running it in production.</p>

<p>The way we have solved this is to have a small service running things on every mesos node that is running docker. This service is called <code>janitor</code> . The <code>janitor</code> is a small python service that runs jobs like docker clean commands on sceduled intervalls to keep the mesos docker nodes in a healty state.</p>

<p>The docker commands we are running currently are the following.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>docker rmi <span class="k">$(</span>docker images -a -q<span class="k">)</span></code></pre></div>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>docker rm -v <span class="k">$(</span>docker ps -a -q -f <span class="nv">status</span><span class="o">=</span>exited<span class="k">)</span></code></pre></div>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>docker rmi <span class="k">$(</span>docker images -f <span class="s2">"dangling=true"</span> -q<span class="k">)</span></code></pre></div>

]]></content:encoded>
      <dc:date>2016-08-21T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>killing the traditional quality assurance way of testing</title>
      <link>http://qone.io/testing/strategies/2016/08/07/breaking-the-traditional-testing-trend.html</link>
      <description><![CDATA[After years in testing roles it’s obvious that the traditional way of doing testing will no longer hold up. What i mena with the traditional way of testing is. Quality assurance, you have separate development and testing teams i.e QA teams. When the development team is done they deliver to QA and they do there work. QA follows a long and usually static test plan and process, your not suppose to step outside the boundaries of the test plan or the process. This way of working is not only slow it disconnects the guys working with testing and development.

]]></description>
      <pubDate>Sun, 07 Aug 2016 00:00:00 +0200</pubDate>
      <guid>http://qone.io/testing/strategies/2016/08/07/breaking-the-traditional-testing-trend.html</guid>
      <content:encoded><![CDATA[<p>After years in testing roles it’s obvious that the traditional way of doing testing will no longer hold up. What i mena with the traditional way of testing is. Quality assurance, you have separate development and testing teams i.e QA teams. When the development team is done they deliver to QA and they do there work. QA follows a long and usually static test plan and process, your not suppose to step outside the boundaries of the test plan or the process. This way of working is not only slow it disconnects the guys working with testing and development.</p>

<p>So why it this so bad? This way of working tends do bring 1. Lots of processes around testing 2. Long test documents that is no longer valid the moment you are done 3. Management i.e C level likes to micro manage the testing work 4. Automation tends to be pushed off due to lack of time. 5. Testing becomes a repetitive which kills inovation 6. Testers are disconnected from development. 7. Company wide processes for tracking bugs and tasks that management can see and know what everyone is doing.</p>

<p>The kind of companies that still works like this, follows the waterfall and itil way of working. They are not very agile and time from development start to running in production is long and can be from 1 - 6 months.</p>

<p>Lets take a look on a more agile and efficient way of working. 1. Lets keep processes to a minimum and let every development team decide how they like to work. 2. There is no need for testing documents. let testers do exploratory testing. A product and service will always be under constant change so should testing. 3. Let testers do what they know best testing and exploring the product. 4. Automation is important to improve the time from development to delivery. 6. Have at least one tester per development team. No more QA team is needed. If testers are involved from start of development they can understand what the new feature is. And can from start help out and hilight risks in design and implementation since testers tend to know how the product is used better then developers. 7. Let the team that owns services track the way that works best for them, in favour of development speed.</p>

<p>The most important things is to improve the time from development start to delivery and this way of working helps a lot to be able to deliver multiple times a day. It still needs a lot of testing, but testing i done during development not after. And a lot of the automation that is needed to deliver with some sanity left can be done during development.</p>
]]></content:encoded>
      <dc:date>2016-08-07T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>Docker alpine smaller image footprint</title>
      <link>http://qone.io/docker/python/python3/alpine/linux/golang/go/2016/07/20/docker-apline-image-size-improvments.html</link>
      <description><![CDATA[Working with docker images to minimise the footprint i.e the size if a image. There is a few things that you can do to get smaller images. I will show some examples for a small go and python3 service built in a Debian and alpine linux based image to compare the result and the footprint that a image.

]]></description>
      <pubDate>Wed, 20 Jul 2016 00:00:00 +0200</pubDate>
      <guid>http://qone.io/docker/python/python3/alpine/linux/golang/go/2016/07/20/docker-apline-image-size-improvments.html</guid>
      <content:encoded><![CDATA[<p>Working with docker images to minimise the footprint i.e the size if a image. There is a few things that you can do to get smaller images. I will show some examples for a small go and python3 service built in a Debian and alpine linux based image to compare the result and the footprint that a image.</p>

<p>The key to building small docker images is only use <code>one</code> <code>RUN</code> step in the Dockerfile. Why you might think. Every RUN in docker is a layer. The layer will contain what you do in that layer like adding package cache. If you then remove the cache in a later RUN you will still have it in the parent layers. So what you do is use al lot of <code>&amp;&amp;</code> in the same RUN and in the end remove the files and cache you don’t need. Selecting the base image will affect you the most when it comes to footprint. I will look on Debian and alpine based images.</p>

<p>I will use the python official images as a reference like <code>python:3.5</code> that is based on jessie with a size of <code>694 MB</code>, and the Alpine Linux version <code>python:3.5-alpine</code> with a size of <code>73 MB</code> .</p>

<p>One of Alpines key features i see other then the base size of <code>4.8 MB</code> , is <code>virtual package</code> it lets you assign packages to one or multiple virtual packages. When you are done just remove the virtual package.</p>

<p>The reference app is a small rest service returning status 200 with a body containing json <code>{"status": "OK"}</code> for both python and go.</p>

<p>Lets start with creating a image based on the <code>python:3.5</code> image with a starting size of <code>694 MB</code>, after build the result is <code>702.5 MB</code></p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">FROM python:3.5

<span class="c"># adding code</span>
WORKDIR /app/pikachu
ADD requirements.txt /app/pikachu

<span class="c"># install</span>
RUN pip install -r requirements.txt

ADD . /app/pikachu

EXPOSE 8080
ENTRYPOINT gunicorn --bind 0.0.0.0:8080 pikachu.app:api</code></pre></div>

<p>If we do the same but now use the <code>python:3.5-alpine</code> image with a starting size of <code>73 MB</code> after build the result is <code>82 MB</code> . Just using the alpine base you will have saved <code>612 MB</code></p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">FROM python:3.5-alpine

<span class="c"># adding code</span>
WORKDIR /app/pikachu
ADD requirements.txt /app/pikachu

<span class="c"># install</span>
RUN apk add --update openssl <span class="se">\</span>
    <span class="o">&amp;&amp;</span> apk --update add --no-cache --virtual build-dependencies libc-dev autoconf gcc <span class="se">\</span>
    <span class="o">&amp;&amp;</span> pip install --no-cache-dir -r requirements.txt <span class="se">\</span>
    <span class="se">\ </span>
    <span class="o">&amp;&amp;</span> rm -rf ~/.cache <span class="se">\</span>
    <span class="o">&amp;&amp;</span> apk del build-dependencies

ADD . /app/pikachu

EXPOSE 8080
ENTRYPOINT gunicorn --bind 0.0.0.0:8080 pikachu.app:api</code></pre></div>

<p>For go we will use 3 base images, Debian, alpine, and scratch. We need to compile go with it’s deps. The resulting file will be about <code>11 MB</code></p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span><span class="nv">CGO_ENABLED</span><span class="o">=</span>0 <span class="nv">GOOS</span><span class="o">=</span>linux go build -a -installsuffix cgo -o main .</code></pre></div>

<p>Lets start with a creating a image based on the <code>debian:8</code> image with a starting size of <code>125 MB</code>, after build the result is <code>136 MB</code></p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">FROM debian:8
ADD main /
CMD <span class="o">[</span><span class="s2">"/main"</span><span class="o">]</span></code></pre></div>

<p>If we do the same but now use the <code>alpine:3.4</code> image with a starting size of <code>4.8 MB</code> after build the result is <code>16.1 MB</code></p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">FROM alpine:3.4
ADD main /
CMD <span class="o">[</span><span class="s2">"/main"</span><span class="o">]</span></code></pre></div>

<p>If we now take a look on the scratch base image we have <code>0 MB</code> as a starting point and the result should be about <code>11 MB</code></p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">FROM alpine:3.4
ADD main /
CMD <span class="o">[</span><span class="s2">"/main"</span><span class="o">]</span></code></pre></div>

<p>The conclusion is that if you need to get small images base it on <code>alpine</code> and use the official alpine images that most project like python, java have official version of.</p>

<p>A note here is that most of the official images now have a alpine option
The examples can be found here. <a href="https://github.com/mad01/examples/tree/master/alpine">Source</a></p>
]]></content:encoded>
      <dc:date>2016-07-20T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>Fabric dynamic hosts tasks</title>
      <link>http://qone.io/python/fabric/fab/dynamic/hosts/2016/06/30/python-fabric-dynamic-hosts.html</link>
      <description><![CDATA[Using fabric with dynamic hosts. In the fabric documentation most of it is using examples and is assuming that you you have a static set of hosts. That is no longer the case when we are working with cloud and a dynamic amout of hosts. The way the fabric want’s you to run tasks is to use the fabric.api.env function to set the hosts you have. If you now want to do this on the fly you have one option a function called execute avalible in fabric.api that takes a key hosts this key will be used to tell fabric to run on this hosts as if you had set env.hosts .

]]></description>
      <pubDate>Thu, 30 Jun 2016 00:00:00 +0200</pubDate>
      <guid>http://qone.io/python/fabric/fab/dynamic/hosts/2016/06/30/python-fabric-dynamic-hosts.html</guid>
      <content:encoded><![CDATA[<p>Using fabric with dynamic hosts. In the fabric documentation most of it is using examples and is assuming that you you have a static set of hosts. That is no longer the case when we are working with cloud and a dynamic amout of hosts. The way the fabric want’s you to run tasks is to use the <code>fabric.api.env</code> function to set the hosts you have. If you now want to do this on the fly you have one option a function called <code>execute</code> avalible in <code>fabric.api</code> that takes a key <code>hosts</code> this key will be used to tell fabric to run on this hosts as if you had set <code>env.hosts</code> .</p>

<p>The way i have structured my fab tasks is by having one <code>task</code> func and one _func doing the actual task that is called with execute. The <code>task</code> is just a placeholder to selecting the hosts i like to run on. In reality the <code>get_hosts</code> will return a list of hosts from google cloud platform. If you like to use key/value arguments on a function the <code>execute</code> function will pass those to you function like in the example</p>

<p>project structur</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">├── requirements.txt
└── fabfile.py</code></pre></div>

<p>example fabfile</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#!/usr/bin/env python2</span>
<span class="kn">from</span> <span class="nn">fabric.api</span> <span class="kn">import</span> <span class="n">task</span><span class="p">,</span> <span class="n">parallel</span><span class="p">,</span> <span class="n">run</span><span class="p">,</span> <span class="n">execute</span>

<span class="k">def</span> <span class="nf">get_hosts</span><span class="p">():</span>
    <span class="k">return</span> <span class="p">[</span><span class="s">'10.0.0.1'</span><span class="p">,</span> <span class="s">'10.0.0.2'</span><span class="p">]</span>

<span class="nd">@parallel</span>
<span class="k">def</span> <span class="nf">_tail</span><span class="p">(</span><span class="n">foo</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">bar</span><span class="o">=</span><span class="s">''</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">run</span><span class="p">(</span><span class="s">'sudo tail -f /var/log/*.log'</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">KeyboardInterrupt</span><span class="p">:</span>
        <span class="k">pass</span>

<span class="nd">@task</span>
<span class="k">def</span> <span class="nf">tail</span><span class="p">():</span>
    <span class="n">hosts</span> <span class="o">=</span> <span class="n">get_hosts</span><span class="p">()</span>
    <span class="n">execute</span><span class="p">(</span><span class="n">_tail</span><span class="p">,</span> <span class="n">hosts</span><span class="o">=</span><span class="n">hosts</span><span class="p">,</span> <span class="n">foo</span><span class="o">=</span><span class="s">'foo'</span><span class="p">,</span> <span class="n">bar</span><span class="o">=</span><span class="s">'bar'</span><span class="p">)</span></code></pre></div>

<p>The example can be found here. <a href="https://github.com/mad01/examples/tree/master/fabric">Source</a></p>
]]></content:encoded>
      <dc:date>2016-06-30T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>why do we do need unit tests</title>
      <link>http://qone.io/testing/unittest/2016/06/05/testing-with-unittess.html</link>
      <description><![CDATA[You might be thinking well unit tests is kind of a obvious thing that you have when you are
writhing code. If you do you are wrong. Not all developers want and can write unit tests.
This is kind of interesting for me.

]]></description>
      <pubDate>Sun, 05 Jun 2016 00:00:00 +0200</pubDate>
      <guid>http://qone.io/testing/unittest/2016/06/05/testing-with-unittess.html</guid>
      <content:encoded><![CDATA[<p>You might be thinking well unit tests is kind of a obvious thing that you have when you are
writhing code. If you do you are wrong. Not all developers want and can write unit tests.
This is kind of interesting for me.</p>

<p>Short about me. I am a software developer in test, i have been spending years on designing,
test automation and writing tooling to help other developers to to be more efficient in
finding issues in the code they deliver. And strategies around quality and testing. Mostly
on the backend and infrastructure area. Also being part of the design phase of a service
to help point out risky areas.</p>

<p>There is a few questions i see that some comes up when unit tests are not obvious. They are</p>

<ol>
  <li>I don’t know how to</li>
  <li>It slows me down, i.e I don’t have time</li>
  <li>It’s working so we don’t need it</li>
</ol>

<p>Point 1
Well then there is a few options that can help. Fist list do some pair programming, spend
some time with the team or the developer that need some help getting started. And implement
a few features together. During this it’s easier to help steering the design of the features
in a direction that makes them easy to test, like splitting code it small functions that are
then more approachable since they should just do one thing. Mock all the thing that you are
dependent on doing calls to external services.</p>

<p>Point 2
From the start writhing unit tests might be time consuming yes. But when you have everything
in place and have tests for most of the code base. You will find that it saves you time, since 
you will get broken tests fast if you broke something during development not in production. That
is just embarrassing that is not something we what. There is also one big benefit that might not
be to obvious. This is that it will be easier to grow the team that owns the service. It’s a pain
in the ass to get to a project as a new developer when there it no tests. The last thing to add 
here is that. Adding tests will help you split the code in to smaller functions that is easier
to add tests for and control. Which improves maintainability of the code in a team.</p>

<p>Point 3
Stating that it it’s working it kind of a dumb ting to say. This is really hard to prove. 
Event if the service looks like it’s working you can’t be entirely sure since you don’t have
tests for it there might be obvious bugs that you will have to spend a lot of time to
trouble shot before you can fix it. Having tests is the key to having a stable service. And
to be able to deploy to production with sanity some left.</p>

<p>Unit testing is not that hard you just have to design and think <code>how do i test this function</code>
during development. This might mean splitting a function in to few smaller functions.
Awesome this means that you have succeeded and made the code more testable and maintainable</p>

<p>-&gt; <img src="/imgs/test-all-the-things.png" alt="test all the things" /> &lt;-</p>
]]></content:encoded>
      <dc:date>2016-06-05T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>python click bash zsh auto complete same files nested command groups</title>
      <link>http://qone.io/python/bash/zsh/nested/2016/04/24/python-click-auto-complete-bash-zsh-nested.html</link>
      <description><![CDATA[Sharing the same auto completion for zsh and bash. In zsh there is somthing called bashcompinit that can be used to share the same completion for bash and zsh. here is a small example project that will fix completion with command groups and nested commands.

]]></description>
      <pubDate>Sun, 24 Apr 2016 00:00:00 +0200</pubDate>
      <guid>http://qone.io/python/bash/zsh/nested/2016/04/24/python-click-auto-complete-bash-zsh-nested.html</guid>
      <content:encoded><![CDATA[<p>Sharing the same auto completion for zsh and bash. In zsh there is somthing called <code>bashcompinit</code> that can be used to share the same completion for bash and zsh. here is a small example project that will fix completion with command groups and nested commands.</p>

<p>project structur</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">├── MANIFEST.in
├── Makefile
├── auto_compleate_install.sh
├── ecli-complete-nested.sh
├── ecli-nested
├── ecli_nested_lib
│   ├── __init__.py
│   └── main.py
├── requirements.txt
└── setup.py</code></pre></div>

<p>click example cli command</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#!/usr/bin/env python2</span>
<span class="kn">import</span> <span class="nn">click</span>

<span class="nd">@click.group</span><span class="p">(</span><span class="n">help</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">ecli</span><span class="p">():</span>
    <span class="k">pass</span>

<span class="nd">@ecli.group</span><span class="p">(</span><span class="n">help</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">cmd1</span><span class="p">():</span>
    <span class="k">pass</span>

<span class="nd">@ecli.group</span><span class="p">(</span><span class="n">help</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">cmd2</span><span class="p">():</span>
    <span class="k">pass</span>

<span class="nd">@cmd1.group</span><span class="p">(</span><span class="n">help</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>
    <span class="k">pass</span>

<span class="nd">@cmd2.group</span><span class="p">(</span><span class="n">help</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">bar</span><span class="p">():</span>
    <span class="k">pass</span>

<span class="n">ecli</span><span class="o">.</span><span class="n">add_command</span><span class="p">(</span><span class="n">cmd1</span><span class="p">)</span>
<span class="n">ecli</span><span class="o">.</span><span class="n">add_command</span><span class="p">(</span><span class="n">cmd2</span><span class="p">)</span>

<span class="n">cmd1</span><span class="o">.</span><span class="n">add_command</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
<span class="n">cmd2</span><span class="o">.</span><span class="n">add_command</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>

<span class="nd">@foo.command</span><span class="p">(</span><span class="s">'do_thing'</span><span class="p">)</span>
<span class="nd">@click.option</span><span class="p">(</span><span class="s">'-t'</span><span class="p">,</span> <span class="s">'--thing'</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">foo_do_thing</span><span class="p">(</span><span class="n">thing</span><span class="p">):</span>
    <span class="n">click</span><span class="o">.</span><span class="n">echo</span><span class="p">(</span><span class="n">thing</span><span class="p">)</span>

<span class="nd">@bar.command</span><span class="p">(</span><span class="s">'do_stuff'</span><span class="p">)</span>
<span class="nd">@click.option</span><span class="p">(</span><span class="s">'-s'</span><span class="p">,</span> <span class="s">'--stuff'</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">bar_do_stuff</span><span class="p">(</span><span class="n">stuff</span><span class="p">):</span>
    <span class="n">click</span><span class="o">.</span><span class="n">echo</span><span class="p">(</span><span class="n">stuff</span><span class="p">)</span></code></pre></div>

<p>install script that is run post install</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/usr/bin/env bash</span>
<span class="k">if</span> <span class="o">[[</span> <span class="k">$(</span>basename <span class="nv">$SHELL</span><span class="k">)</span> <span class="o">=</span> <span class="s1">'bash'</span> <span class="o">]]</span>;
<span class="k">then
    if</span> <span class="o">[</span> -f ~/.bashrc <span class="o">]</span>;
    <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"Installing bash autocompletion"</span>
        cp ecli-complete-nested.sh ~/.ecli-complete-nested.sh
        grep -q <span class="s1">'ecli-complete-nested'</span> ~/.bashrc
        <span class="k">if</span> <span class="o">[[</span> <span class="nv">$?</span> -ne 0 <span class="o">]]</span>; <span class="k">then
            </span><span class="nb">echo</span> <span class="s2">""</span> &gt;&gt; ~/.bashrc
            <span class="nb">echo</span> <span class="s2">"source ~/.ecli-complete-nested.sh"</span> &gt;&gt; ~/.bashrc
        <span class="k">fi
    fi
elif</span> <span class="o">[[</span> <span class="k">$(</span>basename <span class="nv">$SHELL</span><span class="k">)</span> <span class="o">=</span> <span class="s1">'zsh'</span> <span class="o">]]</span>;
<span class="k">then
    if</span> <span class="o">[</span> -f ~/.zshrc <span class="o">]</span>;
    <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"Installing zsh autocompletion"</span>
        cp ecli-complete-nested.sh ~/.ecli-complete-nested.sh
        grep -q <span class="s1">'ecli-complete-nested'</span> ~/.zshrc
        <span class="k">if</span> <span class="o">[[</span> <span class="nv">$?</span> -ne 0 <span class="o">]]</span>; <span class="k">then
            </span><span class="nb">echo</span> <span class="s2">""</span> &gt;&gt; ~/.zshrc
            <span class="nb">echo</span> <span class="s2">"autoload bashcompinit"</span> &gt;&gt; ~/.zshrc
            <span class="nb">echo</span> <span class="s2">"bashcompinit"</span> &gt;&gt; ~/.zshrc
            <span class="nb">echo</span> <span class="s2">"source ~/.ecli-complete-nested.sh"</span> &gt;&gt; ~/.zshrc
        <span class="k">fi
    fi
fi</span></code></pre></div>

<p>setup.py file that runs the post install with auto complete in zsh and bash</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pip.req</span> <span class="kn">import</span> <span class="n">parse_requirements</span>
<span class="kn">from</span> <span class="nn">setuptools</span> <span class="kn">import</span> <span class="n">find_packages</span>
<span class="kn">from</span> <span class="nn">setuptools</span> <span class="kn">import</span> <span class="n">setup</span>
<span class="kn">from</span> <span class="nn">subprocess</span> <span class="kn">import</span> <span class="n">call</span>
<span class="kn">from</span> <span class="nn">setuptools.command.install</span> <span class="kn">import</span> <span class="n">install</span> <span class="k">as</span> <span class="n">_install</span>

<span class="n">install_requirements</span> <span class="o">=</span> <span class="n">parse_requirements</span><span class="p">(</span><span class="s">'requirements.txt'</span><span class="p">,</span> <span class="n">session</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">requirements</span> <span class="o">=</span> <span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="n">ir</span><span class="o">.</span><span class="n">req</span><span class="p">)</span> <span class="k">for</span> <span class="n">ir</span> <span class="ow">in</span> <span class="n">install_requirements</span><span class="p">]</span>

<span class="k">class</span> <span class="nc">install</span><span class="p">(</span><span class="n">_install</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__post_install</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">dir</span><span class="p">):</span>
        <span class="n">call</span><span class="p">([</span><span class="s">'./auto_compleate_install.sh'</span><span class="p">])</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">_install</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">__post_install</span><span class="p">,</span>
            <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">install_lib</span><span class="p">,),</span>
            <span class="n">msg</span><span class="o">=</span><span class="s">"installing auto completion"</span>
            <span class="p">)</span>

<span class="n">setup</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="s">'ecli_nested'</span><span class="p">,</span>
    <span class="n">version</span><span class="o">=</span><span class="s">'0.1a1'</span><span class="p">,</span>
    <span class="n">author</span><span class="o">=</span><span class="s">u'example'</span><span class="p">,</span>
    <span class="n">author_email</span><span class="o">=</span><span class="s">'foo@example.com'</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="s">'Some description'</span><span class="p">,</span>
    <span class="n">packages</span><span class="o">=</span><span class="n">find_packages</span><span class="p">(),</span>
    <span class="n">include_package_data</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">install_requires</span><span class="o">=</span><span class="n">requirements</span><span class="p">,</span>
    <span class="n">entry_points</span><span class="o">=</span><span class="p">{</span>
        <span class="s">'console_scripts'</span><span class="p">:</span> <span class="p">[</span>
            <span class="s">'ecli-nested=ecli_nested_lib.main:ecli'</span><span class="p">,</span>
        <span class="p">]},</span>
    <span class="n">cmdclass</span><span class="o">=</span><span class="p">{</span><span class="s">'install'</span><span class="p">:</span> <span class="n">install</span><span class="p">},</span>
    <span class="p">)</span></code></pre></div>

<p>completion file for bash that can be used with zsh</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">_ecli<span class="o">()</span>
<span class="o">{</span>
    <span class="nb">local </span>cur prev

    <span class="nv">cur</span><span class="o">=</span><span class="k">${</span><span class="nv">COMP_WORDS</span><span class="p">[COMP_CWORD]</span><span class="k">}</span>
    <span class="nv">prev</span><span class="o">=</span><span class="k">${</span><span class="nv">COMP_WORDS</span><span class="p">[COMP_CWORD-1]</span><span class="k">}</span>

    <span class="k">case</span> <span class="k">${</span><span class="nv">COMP_CWORD</span><span class="k">}</span> <span class="k">in
        </span>1<span class="p">)</span>
            <span class="nv">COMPREPLY</span><span class="o">=(</span><span class="k">$(</span><span class="nb">compgen</span> -W <span class="s2">"cmd1 cmd2"</span> <span class="k">${</span><span class="nv">cur</span><span class="k">})</span><span class="o">)</span>
            <span class="p">;;</span>
        2<span class="p">)</span>
            <span class="k">case</span> <span class="k">${</span><span class="nv">prev</span><span class="k">}</span> <span class="k">in
                </span>cmd1<span class="p">)</span>
                    <span class="nv">COMPREPLY</span><span class="o">=(</span><span class="k">$(</span><span class="nb">compgen</span> -W <span class="s2">"foo"</span> <span class="k">${</span><span class="nv">cur</span><span class="k">})</span><span class="o">)</span>
                    <span class="p">;;</span>
                cmd2<span class="p">)</span>
                    <span class="nv">COMPREPLY</span><span class="o">=(</span><span class="k">$(</span><span class="nb">compgen</span> -W <span class="s2">"bar"</span> <span class="k">${</span><span class="nv">cur</span><span class="k">})</span><span class="o">)</span>
                    <span class="p">;;</span>
            <span class="k">esac</span>
            <span class="p">;;</span>
        3<span class="p">)</span>
            <span class="k">case</span> <span class="k">${</span><span class="nv">prev</span><span class="k">}</span> <span class="k">in
                </span>foo<span class="p">)</span>
                    <span class="nv">COMPREPLY</span><span class="o">=(</span><span class="k">$(</span><span class="nb">compgen</span> -W <span class="s2">"do_thing"</span> <span class="k">${</span><span class="nv">cur</span><span class="k">})</span><span class="o">)</span>
                    <span class="p">;;</span>
                bar<span class="p">)</span>
                    <span class="nv">COMPREPLY</span><span class="o">=(</span><span class="k">$(</span><span class="nb">compgen</span> -W <span class="s2">"do_stuff"</span> <span class="k">${</span><span class="nv">cur</span><span class="k">})</span><span class="o">)</span>
                    <span class="p">;;</span>
            <span class="k">esac</span>
            <span class="p">;;</span>
        <span class="k">*</span><span class="p">)</span>
            <span class="nv">COMPREPLY</span><span class="o">=()</span>
            <span class="p">;;</span>
    <span class="k">esac</span>
<span class="o">}</span>

<span class="nb">complete</span> -F _ecli ecli<span class="se">\-</span>nested</code></pre></div>

<p>The example can be found here. <a href="https://github.com/mad01/examples/tree/master/cli_nested">Source</a></p>
]]></content:encoded>
      <dc:date>2016-04-24T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>python click bash zsh auto complete same files</title>
      <link>http://qone.io/python/bash/zsh/2016/04/24/python-click-auto-complete-bash-zsh.html</link>
      <description><![CDATA[Sharing the same auto completion for zsh and bash. In zsh there is somthing called bashcompinit that can be used to share the same completion for bash and zsh. here is a small example project that will fix completion for you when you are not using a nested command structure. see next post about nested completion for bash/zsh

]]></description>
      <pubDate>Sun, 24 Apr 2016 00:00:00 +0200</pubDate>
      <guid>http://qone.io/python/bash/zsh/2016/04/24/python-click-auto-complete-bash-zsh.html</guid>
      <content:encoded><![CDATA[<p>Sharing the same auto completion for zsh and bash. In zsh there is somthing called <code>bashcompinit</code> that can be used to share the same completion for bash and zsh. here is a small example project that will fix completion for you when you are not using a nested command structure. see next post about nested completion for bash/zsh</p>

<p>project structur</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">├── MANIFEST.in
├── Makefile
├── auto_compleate_install.sh
├── ecli
├── ecli_lib
│   ├── __init__.py
│   └── main.py
├── requirements.txt
└── setup.py</code></pre></div>

<p>click example cli command</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#!/usr/bin/env python2</span>
<span class="kn">import</span> <span class="nn">click</span>

<span class="nd">@click.group</span><span class="p">(</span><span class="n">help</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">ecli</span><span class="p">():</span>
    <span class="k">pass</span>

<span class="nd">@click.command</span><span class="p">(</span><span class="s">'thing'</span><span class="p">)</span>
<span class="nd">@click.option</span><span class="p">(</span><span class="s">'-t'</span><span class="p">,</span> <span class="s">'--thing'</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">bar</span><span class="p">(</span><span class="n">thing</span><span class="p">):</span>
    <span class="n">click</span><span class="o">.</span><span class="n">echo</span><span class="p">(</span><span class="n">thing</span><span class="p">)</span>

<span class="nd">@click.command</span><span class="p">(</span><span class="s">'stuff'</span><span class="p">)</span>
<span class="nd">@click.option</span><span class="p">(</span><span class="s">'-s'</span><span class="p">,</span> <span class="s">'--stuff'</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">stuff</span><span class="p">):</span>
    <span class="n">click</span><span class="o">.</span><span class="n">echo</span><span class="p">(</span><span class="n">stuff</span><span class="p">)</span>

<span class="n">ecli</span><span class="o">.</span><span class="n">add_command</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
<span class="n">ecli</span><span class="o">.</span><span class="n">add_command</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span></code></pre></div>

<p>install script that is run post install</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/usr/bin/env bash</span>
<span class="k">if</span> <span class="o">[[</span> <span class="k">$(</span>basename <span class="nv">$SHELL</span><span class="k">)</span> <span class="o">=</span> <span class="s1">'bash'</span> <span class="o">]]</span>;
<span class="k">then
    if</span> <span class="o">[</span> -f ~/.bashrc <span class="o">]</span>;
    <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"Installing bash autocompletion..."</span>
        grep -q <span class="s1">'ecli-autocompletion'</span> ~/.bashrc
        <span class="k">if</span> <span class="o">[[</span> <span class="nv">$?</span> -ne 0 <span class="o">]]</span>; <span class="k">then
            </span><span class="nb">echo</span> <span class="s2">""</span> &gt;&gt; ~/.bashrc
            <span class="nb">echo</span> <span class="s1">'eval "$(_ECLI_COMPLETE=source ecli)"'</span> &gt;&gt; ~/.ecli-autocompletion.sh
            <span class="nb">echo</span> <span class="s2">"source ~/.ecli-autocompletion.sh"</span> &gt;&gt; ~/.bashrc
            <span class="nb">echo</span> <span class="s2">"source ~/.ecli-complete.sh"</span> &gt;&gt; ~/.bashrc
        <span class="k">fi
    fi
elif</span> <span class="o">[[</span> <span class="k">$(</span>basename <span class="nv">$SHELL</span><span class="k">)</span> <span class="o">=</span> <span class="s1">'zsh'</span> <span class="o">]]</span>;
<span class="k">then
    if</span> <span class="o">[</span> -f ~/.zshrc <span class="o">]</span>;
    <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"Installing zsh autocompletion..."</span>
        grep -q <span class="s1">'ecli-autocompletion'</span> ~/.zshrc
        <span class="k">if</span> <span class="o">[[</span> <span class="nv">$?</span> -ne 0 <span class="o">]]</span>; <span class="k">then
            </span><span class="nb">echo</span> <span class="s2">""</span> &gt;&gt; ~/.zshrc
            <span class="nb">echo</span> <span class="s2">"autoload bashcompinit"</span> &gt;&gt; ~/.zshrc
            <span class="nb">echo</span> <span class="s2">"bashcompinit"</span> &gt;&gt; ~/.zshrc
            <span class="nb">echo</span> <span class="s1">'eval "$(_ECLI_COMPLETE=source ecli)"'</span> &gt;&gt; ~/.ecli-autocompletion.sh
            <span class="nb">echo</span> <span class="s2">"source ~/.ecli-autocompletion.sh"</span> &gt;&gt; ~/.zshrc
        <span class="k">fi
    fi
fi</span></code></pre></div>

<p>setup.py file that runs the post install with auto complete in zsh and bash</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">pip.req</span> <span class="kn">import</span> <span class="n">parse_requirements</span>
<span class="kn">from</span> <span class="nn">setuptools</span> <span class="kn">import</span> <span class="n">find_packages</span>
<span class="kn">from</span> <span class="nn">setuptools</span> <span class="kn">import</span> <span class="n">setup</span>
<span class="kn">from</span> <span class="nn">subprocess</span> <span class="kn">import</span> <span class="n">call</span>
<span class="kn">from</span> <span class="nn">setuptools.command.install</span> <span class="kn">import</span> <span class="n">install</span> <span class="k">as</span> <span class="n">_install</span>

<span class="n">install_requirements</span> <span class="o">=</span> <span class="n">parse_requirements</span><span class="p">(</span><span class="s">'requirements.txt'</span><span class="p">,</span> <span class="n">session</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">requirements</span> <span class="o">=</span> <span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="n">ir</span><span class="o">.</span><span class="n">req</span><span class="p">)</span> <span class="k">for</span> <span class="n">ir</span> <span class="ow">in</span> <span class="n">install_requirements</span><span class="p">]</span>

<span class="k">class</span> <span class="nc">install</span><span class="p">(</span><span class="n">_install</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__post_install</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">dir</span><span class="p">):</span>
        <span class="n">call</span><span class="p">([</span><span class="s">'./auto_compleate_install.sh'</span><span class="p">])</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">_install</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">__post_install</span><span class="p">,</span>
            <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">install_lib</span><span class="p">,),</span>
            <span class="n">msg</span><span class="o">=</span><span class="s">"installing auto completion"</span>
            <span class="p">)</span>

<span class="n">setup</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="s">'ecli'</span><span class="p">,</span>
    <span class="n">version</span><span class="o">=</span><span class="s">'0.1a2'</span><span class="p">,</span>
    <span class="n">author</span><span class="o">=</span><span class="s">u'example'</span><span class="p">,</span>
    <span class="n">author_email</span><span class="o">=</span><span class="s">'foo@example.com'</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="s">'Some description'</span><span class="p">,</span>
    <span class="n">packages</span><span class="o">=</span><span class="n">find_packages</span><span class="p">(),</span>
    <span class="n">include_package_data</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">install_requires</span><span class="o">=</span><span class="n">requirements</span><span class="p">,</span>
    <span class="n">entry_points</span><span class="o">=</span><span class="p">{</span>
        <span class="s">'console_scripts'</span><span class="p">:</span> <span class="p">[</span>
            <span class="s">'ecli=ecli_lib.main:ecli'</span><span class="p">,</span>
        <span class="p">]},</span>
    <span class="n">cmdclass</span><span class="o">=</span><span class="p">{</span><span class="s">'install'</span><span class="p">:</span> <span class="n">install</span><span class="p">},</span>
    <span class="p">)</span></code></pre></div>

<p>The example can be found here. <a href="https://github.com/mad01/examples/tree/master/cli">Source</a></p>
]]></content:encoded>
      <dc:date>2016-04-24T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>python protobuf over http</title>
      <link>http://qone.io/protobuf/python/http/2016/01/11/python-protobuf-over-http.html</link>
      <description><![CDATA[The point of this is a smal example on how you could use protobuf to send data over http. In this example i will be using Python and the packet falcon for the server. A command line tool as the client. The example will just be a simple ping/pong containing a message, channel, and PING or PONG sent to the server. The server will respond with the same message and channel and a PONG.

]]></description>
      <pubDate>Mon, 11 Jan 2016 00:00:00 +0100</pubDate>
      <guid>http://qone.io/protobuf/python/http/2016/01/11/python-protobuf-over-http.html</guid>
      <content:encoded><![CDATA[<p>The point of this is a smal example on how you could use protobuf to send data over http. In this example i will be using Python and the packet falcon for the server. A command line tool as the client. The example will just be a simple ping/pong containing a message, channel, and PING or PONG sent to the server. The server will respond with the same message and channel and a PONG.</p>

<p>lets first start with the structure of the files is like the following. all files used can be found on github see source in the end of the post. a note some in the source there is some extra code that is removed to not clutter the example.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">protobuf
├── client.py
├── lib
│   ├── __init__.py
│   ├── client_api.py
│   ├── py_proto.proto
│   ├── py_proto_pb2.py
│   └── server_api.py
├── requirements.txt
├── server.py
└── tests
    └── test_proto.py</code></pre></div>

<p>to get started we need a protobuf file that sets the format of messages that should be used.
a enum is used to hold the name/value that we like for a pingId. a PingDTO that will hold the message values that we like in the PingDTO. We then use this PingDTO in the PingCommand and the PingDocument. The PingCommand will be used to send to the server and the response will be the PingDocument.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">package api;

enum PingIdDTO <span class="o">{</span>
    PING <span class="o">=</span> 1;
    PONG <span class="o">=</span> 2;
<span class="o">}</span>

message PingDTO <span class="o">{</span>
    required string msg <span class="o">=</span> 1;
    required string channel <span class="o">=</span> 2;
    required PingIdDTO pingId <span class="o">=</span> 3;
<span class="o">}</span>

message PingCommand <span class="o">{</span>
    required PingDTO ping <span class="o">=</span> 1;
<span class="o">}</span>

message PingDocument <span class="o">{</span>
    required PingDTO ping <span class="o">=</span> 1;
<span class="o">}</span></code></pre></div>

<p>to build the proto python file. you will get py_proto_pb2.py which is the protobuf python class file that you later  use to build a proto client and server.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>protoc --python_out<span class="o">=</span>. lib/py_proto.proto</code></pre></div>

<p>Server api. The server uses the generated protobuf python file to parse the command sent, and to return the document to the client.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#!/usr/bin/env python3</span>
<span class="kn">import</span> <span class="nn">falcon</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">py_proto_pb2</span> <span class="k">as</span> <span class="n">proto</span>

<span class="k">def</span> <span class="nf">proto_http_type</span><span class="p">():</span>
    <span class="k">return</span> <span class="s">'application/x-protobuf'</span>

<span class="k">class</span> <span class="nc">Ping</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">proto</span> <span class="o">=</span> <span class="n">proto</span>

    <span class="k">def</span> <span class="nf">on_post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">resp</span><span class="p">):</span>
            <span class="n">command</span> <span class="o">=</span> <span class="n">proto</span><span class="o">.</span><span class="n">PingCommand</span><span class="p">()</span>
            <span class="n">command</span><span class="o">.</span><span class="n">ParseFromString</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">stream</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>

            <span class="n">cmd</span> <span class="o">=</span> <span class="n">proto</span><span class="o">.</span><span class="n">PingDocument</span><span class="p">()</span>
            <span class="n">cmd</span><span class="o">.</span><span class="n">ping</span><span class="o">.</span><span class="n">msg</span> <span class="o">=</span> <span class="n">command</span><span class="o">.</span><span class="n">ping</span><span class="o">.</span><span class="n">msg</span>
            <span class="n">cmd</span><span class="o">.</span><span class="n">ping</span><span class="o">.</span><span class="n">channel</span> <span class="o">=</span> <span class="n">command</span><span class="o">.</span><span class="n">ping</span><span class="o">.</span><span class="n">channel</span>
            <span class="n">cmd</span><span class="o">.</span><span class="n">ping</span><span class="o">.</span><span class="n">pingId</span> <span class="o">=</span> <span class="n">proto</span><span class="o">.</span><span class="n">PONG</span>

            <span class="k">print</span><span class="p">(</span><span class="s">'msg: </span><span class="si">%</span><span class="s">s'</span> <span class="o">%</span> <span class="n">command</span><span class="o">.</span><span class="n">ping</span><span class="o">.</span><span class="n">msg</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="s">'channel: </span><span class="si">%</span><span class="s">s'</span> <span class="o">%</span> <span class="n">command</span><span class="o">.</span><span class="n">ping</span><span class="o">.</span><span class="n">channel</span><span class="p">)</span>

            <span class="n">resp</span><span class="o">.</span><span class="n">content_type</span> <span class="o">=</span> <span class="n">proto_http_type</span><span class="p">()</span>
            <span class="n">resp</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">falcon</span><span class="o">.</span><span class="n">HTTP_201</span>
            <span class="n">resp</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">cmd</span><span class="o">.</span><span class="n">SerializeToString</span><span class="p">()</span></code></pre></div>

<p>Server function made to run the falcon app.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#!/usr/bin/env python3</span>
<span class="kn">import</span> <span class="nn">falcon</span>
<span class="kn">from</span> <span class="nn">lib</span> <span class="kn">import</span> <span class="n">server_api</span>

<span class="n">api</span> <span class="o">=</span> <span class="n">falcon</span><span class="o">.</span><span class="n">API</span><span class="p">()</span>
<span class="n">api</span><span class="o">.</span><span class="n">add_route</span><span class="p">(</span><span class="s">'/api/ping'</span><span class="p">,</span> <span class="n">server_api</span><span class="o">.</span><span class="n">Ping</span><span class="p">())</span></code></pre></div>

<p>Starting the server by using gunicorn and calling the api falcon api</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>gunicorn server:api</code></pre></div>

<p>Client api. Like in the server we use the same python generated proto file. To send a command to the server and get back the response document that will be printed to stdout.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#!/usr/bin/env python3</span>
<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">py_proto_pb2</span> <span class="k">as</span> <span class="n">proto</span>

<span class="k">class</span> <span class="nc">Client</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">session</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">update</span><span class="p">({</span>
            <span class="s">"Content-Type"</span><span class="p">:</span> <span class="s">"application/x-protobuf"</span><span class="p">,</span>
            <span class="s">"Accept"</span><span class="p">:</span> <span class="s">"application/x-protobuf"</span>
        <span class="p">})</span>

    <span class="k">def</span> <span class="nf">pingId</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ping</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">proto</span><span class="o">.</span><span class="n">PingIdDTO</span><span class="o">.</span><span class="n">Value</span><span class="p">(</span><span class="n">ping</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">build_url</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">urn</span><span class="p">):</span>
        <span class="n">url</span> <span class="o">=</span> <span class="s">'http://</span><span class="si">%</span><span class="s">s:8000/</span><span class="si">%</span><span class="s">s'</span> <span class="o">%</span> <span class="p">(</span><span class="s">'127.0.0.1'</span><span class="p">,</span> <span class="n">urn</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">url</span>

    <span class="k">def</span> <span class="nf">send_ping</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">msg</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">channel</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">pingId</span><span class="o">=</span><span class="s">''</span><span class="p">):</span>
        <span class="n">url</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">build_url</span><span class="p">(</span><span class="s">'api/ping'</span><span class="p">)</span>
        <span class="n">command</span> <span class="o">=</span> <span class="n">proto</span><span class="o">.</span><span class="n">PingCommand</span><span class="p">()</span>
        <span class="n">command</span><span class="o">.</span><span class="n">ping</span><span class="o">.</span><span class="n">msg</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
        <span class="n">command</span><span class="o">.</span><span class="n">ping</span><span class="o">.</span><span class="n">channel</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">channel</span><span class="p">)</span>
        <span class="n">command</span><span class="o">.</span><span class="n">ping</span><span class="o">.</span><span class="n">pingId</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">pingId</span><span class="p">(</span><span class="n">pingId</span><span class="p">)</span>

        <span class="n">res</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">command</span><span class="o">.</span><span class="n">SerializeToString</span><span class="p">())</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="n">proto</span><span class="o">.</span><span class="n">PingDocument</span><span class="p">()</span>
        <span class="n">cmd</span><span class="o">.</span><span class="n">ParseFromString</span><span class="p">(</span><span class="n">res</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">cmd</span></code></pre></div>

<p>Client made as a command line tool to be able to just send some commands and then print the response. You send PING which is id 1 and you should get back id 2 from the server</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#!/usr/bin/env python3</span>
<span class="kn">import</span> <span class="nn">argparse</span>
<span class="kn">from</span> <span class="nn">lib</span> <span class="kn">import</span> <span class="n">client_api</span>

<span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">msg</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">channel</span><span class="o">=</span><span class="s">''</span><span class="p">):</span>
    <span class="n">api</span> <span class="o">=</span> <span class="n">client_api</span><span class="o">.</span><span class="n">Client</span><span class="p">()</span>
    <span class="n">cmd</span> <span class="o">=</span> <span class="n">api</span><span class="o">.</span><span class="n">send_ping</span><span class="p">(</span>
        <span class="n">msg</span><span class="o">=</span><span class="n">msg</span><span class="p">,</span>
        <span class="n">channel</span><span class="o">=</span><span class="n">channel</span><span class="p">,</span>
        <span class="n">pingId</span><span class="o">=</span><span class="s">'PING'</span>
        <span class="p">)</span>

    <span class="k">print</span><span class="p">(</span><span class="s">'Response: </span><span class="si">%</span><span class="s">s'</span> <span class="o">%</span> <span class="n">cmd</span><span class="o">.</span><span class="n">ping</span><span class="o">.</span><span class="n">pingId</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'message sent: </span><span class="si">%</span><span class="s">s'</span> <span class="o">%</span> <span class="n">cmd</span><span class="o">.</span><span class="n">ping</span><span class="o">.</span><span class="n">msg</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'to channel: </span><span class="si">%</span><span class="s">s'</span> <span class="o">%</span> <span class="n">cmd</span><span class="o">.</span><span class="n">ping</span><span class="o">.</span><span class="n">channel</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">description</span> <span class="o">=</span> <span class="s">'command line tool send messages to a channel'</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'-m'</span><span class="p">,</span> <span class="s">'--message'</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'-c'</span><span class="p">,</span> <span class="s">'--channel'</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
    <span class="n">call</span><span class="p">(</span>
        <span class="n">msg</span><span class="o">=</span><span class="n">args</span><span class="o">.</span><span class="n">message</span><span class="p">,</span>
        <span class="n">channel</span><span class="o">=</span><span class="n">args</span><span class="o">.</span><span class="n">channel</span>
        <span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span></code></pre></div>

<p>The example can be found here. <a href="https://github.com/mad01/examples/tree/master/protobuf">Source</a></p>
]]></content:encoded>
      <dc:date>2016-01-11T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>jenkins test result dashboard</title>
      <link>http://qone.io/jenkins/react/dashboard/testing/stats/2015/11/14/jenkins-test-dashboard.html</link>
      <description><![CDATA[Minimal Jenkins test result dashboard

]]></description>
      <pubDate>Sat, 14 Nov 2015 00:00:00 +0100</pubDate>
      <guid>http://qone.io/jenkins/react/dashboard/testing/stats/2015/11/14/jenkins-test-dashboard.html</guid>
      <content:encoded><![CDATA[<p>Minimal Jenkins test result dashboard</p>

<p><img src="/imgs/dashi-demo.png" alt="dashboard img" /></p>

<p>The background to making the dashboard is as part of the on boarding at work we are able to do a small projekt. We are using Jenkins as the tool for our continuous integration tests like many others. Since most of the Jenkins plugins that exists for build information is not that pretty, it made a lot of since to do a minimalistic dashboard for the test results. And why not do something in React as the frontend rendering engine and python as the backend. The dashboard is also using redis cache for the result data, and in the docker stack haproxy to terminate http on port 80. The frontend polls the backend every 15 sec for new data.</p>

<p>To get up and running with the dashboard you have two options either you run it with docker using <code>make</code> and docker-compose to start the stack. Or you install the needed on the host you have and have it running like that.</p>

<p>Install instructions for my minimal test result dashboard. pre install assumtions is that you have docker/docker-compose installed</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git clone https://github.com/gutro/dashi.git</code></pre></div>

<p>copy the example config file and edit it to work you your Jenkins. Start with the Jenkins config, by adding the jenins host, followed by a user and the user token the transport type http or https, and the exact job name in Jenkins this is only tested when the name is &lt;name&gt;-&lt;name&gt;, add a shorter description that you like to see in the frontend cards. The the redis configuration, if you are running using docker just set the host to redis, and leave the rest. the poll interval for collecting data from Jenkins is set by the poll_interval key the default is set to 10 sec. The redis data have a config value expire_time 30 default, if no data is in redis the backend will get data from Jenkins.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>cp example.config.yml config.yml</code></pre></div>

<p>start the docker-compose stack</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>docker-compose up -d</code></pre></div>

]]></content:encoded>
      <dc:date>2015-11-14T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>backup of linux vps using gsutil</title>
      <link>http://qone.io/backup/google/gsutil/2015/08/30/backup-linux-gsutil.html</link>
      <description><![CDATA[Backing up linux servers to google clound storage with gsutil using the storage option nearline. What is needed to do this is a google cloud accound. Start by creating a new project for backup. After that use that Project ID to configure gsutil in the next step.

]]></description>
      <pubDate>Sun, 30 Aug 2015 00:00:00 +0200</pubDate>
      <guid>http://qone.io/backup/google/gsutil/2015/08/30/backup-linux-gsutil.html</guid>
      <content:encoded><![CDATA[<p>Backing up linux servers to google clound storage with gsutil using the storage option nearline. What is needed to do this is a google cloud accound. Start by creating a new project for backup. After that use that Project ID to configure gsutil in the next step.</p>

<p>start by configuring gsutil.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>gsutil config</code></pre></div>

<p>Create a nearline bucket on google clound storage. The mb flag means create bucket. the -l flag means location options is ASIA, EU, US. For more options take a look in the <a href="https://cloud.google.com/storage/docs/gsutil/commands/mb">gsutil mb doc</a></p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>gsutil mb -l EU -c nearline gs://&lt;bucket&gt;</code></pre></div>

<p>Set up the backup to run ones every day by placing this script in /etc/cron.daily/. You can use the monthly weekly daily or hourly like this. The -x flag is all files that like you to be excluded from the backup and the -r flag is the src directory that you like to backup.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/bash</span>
gsutil -qm rsync -x <span class="s1">'.&lt;exclude-file&gt;|&lt;exclude-file&gt;'</span> -r /&lt;src-directory&gt;  gs://&lt;bucket&gt;</code></pre></div>

]]></content:encoded>
      <dc:date>2015-08-30T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>selenium as a service in osx</title>
      <link>http://qone.io/testing/selenium/jenkins/osx/2015/08/15/selenium-service-osx.html</link>
      <description><![CDATA[Setting up selenium server as a service in os x that starts on boot. What is needed is a plist service file to start and take stdout and stderr and log the output.  I will be using homebrew for install of the selenium server. in this example i have used a vagrant image of Yosemite you can find it here vagrant image.

]]></description>
      <pubDate>Sat, 15 Aug 2015 00:00:00 +0200</pubDate>
      <guid>http://qone.io/testing/selenium/jenkins/osx/2015/08/15/selenium-service-osx.html</guid>
      <content:encoded><![CDATA[<p>Setting up selenium server as a service in os x that starts on boot. What is needed is a plist service file to start and take stdout and stderr and log the output.  I will be using homebrew for install of the selenium server. in this example i have used a vagrant image of Yosemite you can find it here <a href="http://files.dryga.com/boxes/osx-yosemite-0.2.1.box">vagrant image</a>.</p>

<p>A NOTE about the OS X Licensing. 
Apple’s EULA states that you can install your copy on your actual Apple-hardware, plus up to two VMs running on your Apple-hardware. So using this box on another hardware is may be illigal and you should do it on your own risk.</p>

<p>Start by installing the selenium standalone server using brew</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>brew install selenium-server-standalone</code></pre></div>

<p>install java7 using brew cask</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>brew tap caskroom/versions
<span class="gp">$ </span>brew cask install java7</code></pre></div>

<p>create a plist file for the service. This is what is needed if you like to start selenium-standalone with port 4444 and logging the stdout to <code>/var/log/selenium/selenium-output.log</code> and stderr to <code>/var/log/selenium/selenium-error.log</code> . save it as selenium.plist</p>

<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span>
<span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">"1.0"</span><span class="nt">&gt;</span>
<span class="nt">&lt;dict&gt;</span>
        <span class="nt">&lt;key&gt;</span>Label<span class="nt">&lt;/key&gt;</span>
        <span class="nt">&lt;string&gt;</span>selenium<span class="nt">&lt;/string&gt;</span>
        <span class="nt">&lt;key&gt;</span>RunAtLoad<span class="nt">&lt;/key&gt;</span>
        <span class="nt">&lt;true/&gt;</span>
        <span class="nt">&lt;key&gt;</span>ProgramArguments<span class="nt">&lt;/key&gt;</span>
        <span class="nt">&lt;array&gt;</span>
                <span class="nt">&lt;string&gt;</span>/usr/local/bin/selenium-server<span class="nt">&lt;/string&gt;</span>
                <span class="nt">&lt;string&gt;</span>-port<span class="nt">&lt;/string&gt;</span>
                <span class="nt">&lt;string&gt;</span>4444<span class="nt">&lt;/string&gt;</span>
        <span class="nt">&lt;/array&gt;</span>
        <span class="nt">&lt;key&gt;</span>ServiceDescription<span class="nt">&lt;/key&gt;</span>
        <span class="nt">&lt;string&gt;</span>Selenium Server<span class="nt">&lt;/string&gt;</span>
        <span class="nt">&lt;key&gt;</span>StandardErrorPath<span class="nt">&lt;/key&gt;</span>
        <span class="nt">&lt;string&gt;</span>/var/log/selenium/selenium-error.log<span class="nt">&lt;/string&gt;</span>
        <span class="nt">&lt;key&gt;</span>StandardOutPath<span class="nt">&lt;/key&gt;</span>
        <span class="nt">&lt;string&gt;</span>/var/log/selenium/selenium-output.log<span class="nt">&lt;/string&gt;</span>
<span class="nt">&lt;/dict&gt;</span>
<span class="nt">&lt;/plist&gt;</span></code></pre></div>

<p>create the log folder using sudo since root will run the service</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>sudo mkdir -p /var/log/selenium/</code></pre></div>

<p>copy the selenium.plist to <code>/Library/LaunchDaemons</code> since we like it to run as a demon by the root user on boot.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>sudo cp selenium.plist /Library/LaunchDaemons</code></pre></div>

<p>load the service in to system using <code>launchctl</code></p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>sudo launchctl bootstrap system /Library/LaunchDaemons/selenium.plist</code></pre></div>

<p>bash script to install google chrome</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/bash</span>
curl -L -O <span class="s2">"https://dl.google.com/chrome/mac/stable/GGRO/googlechrome.dmg"</span>
hdiutil mount -nobrowse googlechrome.dmg
cp -R <span class="s2">"/Volumes/Google Chrome/Google Chrome.app"</span> /Applications
hdiutil unmount <span class="s2">"/Volumes/Google Chrome"</span>
rm googlechrome.dmg</code></pre></div>

<p>install chromedriver</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>brew install chromedriver</code></pre></div>

<p>To make it possible to start running selenium tests on the server you need the user logged with a active workspace. To get this working after reboot with no manual login you do the following. Open <code>System Preferences</code> &gt; <code>Security &amp; Privacy</code> &gt;<code>Click the lock to make changes</code> &gt; uncheck <code>Disable automatic login</code> .</p>

<p>Source <a href="https://github.com/mad01/boilerplates/blob/master/osx/selenium.plist">selenium.plist</a> <a href="https://github.com/mad01/boilerplates/blob/master/osx/chrome-install.sh">chrome-install.sh</a></p>

]]></content:encoded>
      <dc:date>2015-08-15T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>docker machine and aws in combination with ansible</title>
      <link>http://qone.io/docker/docker-machine/ansible/aws/2015/06/13/docker-ansible-aws-docker-machine.html</link>
      <description><![CDATA[Initial setup with ansible and docker-machine. In this case i have been using aws to run a docker host for me created with docker-machine. I had a goal to provision a ec2 box and have a few docker containers running in that ec2 vm. A note here is that the same way should work on any of the docker-machine driver there is nothing unique with aws in the way i have done this. From what i know you cant NOT use ansible on boot2docker, i have assumed that there is a full linux vm running.

]]></description>
      <pubDate>Sat, 13 Jun 2015 00:00:00 +0200</pubDate>
      <guid>http://qone.io/docker/docker-machine/ansible/aws/2015/06/13/docker-ansible-aws-docker-machine.html</guid>
      <content:encoded><![CDATA[<p>Initial setup with ansible and <code>docker-machine</code>. In this case i have been using aws to run a docker host for me created with <code>docker-machine</code>. I had a goal to provision a ec2 box and have a few docker containers running in that ec2 vm. A note here is that the same way should work on any of the <code>docker-machine</code> driver there is nothing unique with aws in the way i have done this. From what i know you cant NOT use ansible on boot2docker, i have assumed that there is a full linux vm running.</p>

<p>Since ansible is using a ssh-key i had to add that key to the <code>docker-machine</code> ec2 vm after it’s created. There is a option to run remote command line commands on a remote docker-machine driver.</p>

<p>first lets create the a driver on amazon ec2. This will create a vm of the type “t2.micro” which is the default type on aws. If you like to change the instance type you can use this “–amazonec2-instance-type”</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">docker-machine create <span class="se">\</span>
--driver amazonec2 <span class="se">\</span>
--amazonec2-access-key &lt;key&gt; <span class="se">\</span>
--amazonec2-secret-key &lt;key&gt; <span class="se">\</span>
--amazonec2-subnet-id &lt;key&gt; <span class="se">\</span>
--amazonec2-region eu-west-1 <span class="se">\</span>
box <span class="se">\</span></code></pre></div>

<p>It can look like this to add your public ssh key to the ec2 vm. I am taking the output of my public ssh key and assigning it to a variable localKey. Then running a remote command with <code>docker-machine</code> on the driver named ‘box’. The localKey variable is added to the remote box ssh authorized_keys.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">localKey</span><span class="o">=</span><span class="k">$(</span>cat ~/.ssh/id_rsa.pub<span class="k">)</span> <span class="se">\</span>
<span class="o">&amp;&amp;</span> docker-machine ssh box <span class="s2">"echo "</span><span class="nv">$localKey</span><span class="s2">" &gt;&gt; .ssh/authorized_keys"</span> <span class="se">\</span>
<span class="o">&amp;&amp;</span> <span class="nb">eval</span> <span class="s2">"</span><span class="k">$(</span>docker-machine env box<span class="k">)</span><span class="s2">"</span></code></pre></div>

<p>To get ansible working now i just have to add the ip of the driver. i am taking the ip of the driver box and assigns it to the variable driverIP that variable it then used to echo the ip in to the configured ansible inventory file.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">driverIP</span><span class="o">=</span><span class="k">$(</span>docker-machine ip box<span class="k">)</span> <span class="se">\</span>
<span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">[box]</span><span class="se">\n</span><span class="s2">root"</span>@<span class="nv">$driverIP</span> &gt;&gt; <span class="nv">$ANSIBLE_INVENTORY</span></code></pre></div>

<p>Now that you have done the basic setup to be able to run ansible on the remote system. We have to install a few packets to be able to start docker with ansible. Here is a example ansible playbook. Ansible will need to have docker-py installed on the target host to be able to start docker containers. The file is saved as “ansible-docker-host.yml” due to a issue in pip the docker-py version had to be 1.1.0 .</p>

<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="nn">---</span>
<span class="pi">-</span> <span class="s">hosts</span><span class="pi">:</span> <span class="s">box</span>
  <span class="s">remote_user</span><span class="pi">:</span> <span class="s">root</span>
  <span class="s">sudo</span><span class="pi">:</span> <span class="s">yes</span>
  <span class="s">tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">name</span><span class="pi">:</span> <span class="s">apt install python-setuptools</span>
      <span class="s">apt</span><span class="pi">:</span> <span class="s">name=python-setuptools</span>

    <span class="pi">-</span> <span class="s">name</span><span class="pi">:</span> <span class="s">apt install python-dev</span>
      <span class="s">apt</span><span class="pi">:</span> <span class="s">name=python-dev</span>

    <span class="pi">-</span> <span class="s">name</span><span class="pi">:</span> <span class="s">apt install python-pip</span>
      <span class="s">apt</span><span class="pi">:</span> <span class="s">name=python-pip</span>

    <span class="pi">-</span> <span class="s">name</span><span class="pi">:</span> <span class="s">pip install docker-py</span>
      <span class="s">pip</span><span class="pi">:</span> <span class="s">name=docker-py version=1.1.0</span></code></pre></div>

<p>Lets run the playbook to get the remote system installed with the needed to start docker with ansible</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">ansible-playbook ansible-docker-host.yml</code></pre></div>

<p>The image used have have sshd installed username:root password:foobar. What will be done is to start a container named testing with image mad01/sshlab found on the docker hub, and the state of the docker container is started, the container port 22 will be mapped to the ec2 vm port 2222. A note here is that the docker-machine setup function will not have created a fireawall rule for that 2222 port on amazon, that is outside the scope of docker-machine atm.</p>

<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="nn">---</span>
<span class="pi">-</span> <span class="s">hosts</span><span class="pi">:</span> <span class="s">box</span>
  <span class="s">remote_user</span><span class="pi">:</span> <span class="s">root</span>
  <span class="s">sudo</span><span class="pi">:</span> <span class="s">yes</span>
  <span class="s">tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">name</span><span class="pi">:</span> <span class="s">testing container</span>
      <span class="s">docker</span><span class="pi">:</span>
        <span class="s">name</span><span class="pi">:</span> <span class="s">testing</span>
        <span class="s">image</span><span class="pi">:</span> <span class="s">mad01/sshlab</span>
        <span class="s">state</span><span class="pi">:</span> <span class="s">started</span>
        <span class="s">pull</span><span class="pi">:</span> <span class="s">always</span>
        <span class="s">ports</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="s2">"</span><span class="s">2222:22"</span></code></pre></div>

<p>Lets now start the docker container on the remote vm.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">ansible-playbook ansible-docker-start.yml</code></pre></div>

<p>you can check that the docker container is running with “docker ps” on the local machine. to remove the aws ec2 vm you just run.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">docker-machine rm box</code></pre></div>

]]></content:encoded>
      <dc:date>2015-06-13T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>sqlite3 in memory db for testing db functions in python</title>
      <link>http://qone.io/testing/python/sqlite/2015/06/06/python-sqlite-testing-clean-state.html</link>
      <description><![CDATA[designing a app to be as testable as posible. When writing a application that you like to, write unit tests the best options it to always on everything written for a application to not be dependent on that the application is running. Since if we can import a function and muck or just test the isolated function. One example on this is a database function, and a database. In this example i will use sqlite3 as a example. sqlite have a option to start the db in memory. This is something is very useful since you like to have a clean state of the database for every test.

]]></description>
      <pubDate>Sat, 06 Jun 2015 00:00:00 +0200</pubDate>
      <guid>http://qone.io/testing/python/sqlite/2015/06/06/python-sqlite-testing-clean-state.html</guid>
      <content:encoded><![CDATA[<p>designing a app to be as testable as posible. When writing a application that you like to, write unit tests the best options it to always on everything written for a application to not be dependent on that the application is running. Since if we can import a function and muck or just test the isolated function. One example on this is a database function, and a database. In this example i will use sqlite3 as a example. sqlite have a option to start the db in memory. This is something is very useful since you like to have a clean state of the database for every test.</p>

<p>Continuing with a example. In the test setup function a in memory sqlite db is created and data is imported that is needed to test some database functions. On teardown the db is closed and on the next test its recreated to have every test start in a clean state and not be dependent the order of a test.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">inactive</span> <span class="o">=</span> <span class="p">[</span><span class="s">"b"</span><span class="p">,</span> <span class="s">"c"</span><span class="p">,</span> <span class="s">"d"</span><span class="p">,</span> <span class="s">"e"</span><span class="p">]</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">db</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">':memory:'</span><span class="p">)</span>

    <span class="n">cursor</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
        <span class="s">"CREATE TABLE inactive(id INTEGER PRIMARY KEY,word TEXT)"</span>
        <span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">inactive</span><span class="p">:</span>
        <span class="n">sql</span><span class="o">.</span><span class="n">db_insert_row_inactive</span><span class="p">(</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">db</span><span class="p">,</span>
            <span class="n">word</span><span class="o">=</span><span class="n">i</span>
        <span class="p">)</span>

<span class="k">def</span> <span class="nf">tearDown</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="s">"""close the db in memory to start next test in a clean state"""</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">close</span><span class="p">()</span></code></pre></div>

<p>Looking on two example tests that is then importing a db function to add and remove rows in the inactive table. between the tests the db is recreated which makes the test start from a known state which makes it’s easier to recreate and control the what is tested.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">test_db_insert_row_inactive</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="n">test_word</span> <span class="o">=</span> <span class="s">"bar"</span>
    <span class="n">sql</span><span class="o">.</span><span class="n">db_insert_row_inactive</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">db</span><span class="p">,</span> <span class="n">word</span><span class="o">=</span><span class="n">test_word</span><span class="p">)</span>
    <span class="n">dbGet</span> <span class="o">=</span> <span class="n">sql</span><span class="o">.</span><span class="n">db_get_word_in_inactive</span><span class="p">(</span><span class="n">test_word</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">db</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">dbGet</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">"word"</span><span class="p">),</span> <span class="n">test_word</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">test_db_remove_row_inactive_by_word</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="n">sql</span><span class="o">.</span><span class="n">db_remove_word_inactive</span><span class="p">(</span><span class="s">"b"</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">db</span><span class="p">)</span>
    <span class="n">dbGet</span> <span class="o">=</span> <span class="n">sql</span><span class="o">.</span><span class="n">db_get_word_in_inactive</span><span class="p">(</span><span class="s">"b"</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">db</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">assertIsNone</span><span class="p">(</span><span class="n">dbGet</span><span class="p">)</span></code></pre></div>

<p>The full application that is used as a example can be found here. <a href="https://github.com/mad01/url-shortener">Source</a></p>
]]></content:encoded>
      <dc:date>2015-06-06T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>encrypted backup with arq amazon and s3 glacier</title>
      <link>http://qone.io/backup/arq/aws/s3/glacier/2015/05/16/backup-s3-arq.html</link>
      <description><![CDATA[As most that have any knowledge of IT and tech. Backup is a big topic also encryption now in the later days when there have been a lot of talk about that our data can be read if we are not using encryption everywhere. Now when most of os have most of our life in a digital form the information that we store in our phones, computers are more then ever a target for criminals and the data is important to us. Not only that electronics to break and when that day comes none will be happy if all there personal data, files, photos are lost due to a broken phone or computer. This is why backup is such a important thing. Doing backup right is not that hard. running around with a external drive or usb memory is not a god option, as a main backup. You will forget to do it, the best is to have one or multiple incremental backups that is running in the background so you don’t have to think about all the time. You should of course try to do restores from the backups every now and then to be sure that they are working and running as expected.

]]></description>
      <pubDate>Sat, 16 May 2015 00:00:00 +0200</pubDate>
      <guid>http://qone.io/backup/arq/aws/s3/glacier/2015/05/16/backup-s3-arq.html</guid>
      <content:encoded><![CDATA[<p>As most that have any knowledge of IT and tech. Backup is a big topic also encryption now in the later days when there have been a lot of talk about that our data can be read if we are not using encryption everywhere. Now when most of os have most of our life in a digital form the information that we store in our phones, computers are more then ever a target for criminals and the data is important to us. Not only that electronics to break and when that day comes none will be happy if all there personal data, files, photos are lost due to a broken phone or computer. This is why backup is such a important thing. Doing backup right is not that hard. running around with a external drive or usb memory is not a god option, as a main backup. You will forget to do it, the best is to have one or multiple incremental backups that is running in the background so you don’t have to think about all the time. You should of course try to do restores from the backups every now and then to be sure that they are working and running as expected.</p>

<p>I have a few different backups running all the time. a note i am a mac user and i will be relating to solutions that is working with a mac and os x. Some of them might work with other platforms like <a href="https://www.arqbackup.com/">arq</a> . I am at this moment using two offline external hard drives, with time machine, one network drive with time machine for incremental backups and <a href="http://www.code42.com/crashplan/">crashplan</a> for a online backup. What all of them have in common is that they are supporting encryption on the client side. A note is that i also relying on the os x <code>filevault</code> to encrypt my macs. I have recently taken a decision to start to use a application called <a href="https://www.arqbackup.com/">arq</a> that allows me to backup to a few different storage options like Amazon s3 and glacier, Dropbox, Google Drive, Google Cloud Storage, SFTP, DreamObjects, Microsoft OneDrive and other S3-Compatible Services. This is a few good options like you can se. What <code>arq</code> is providing that others like <a href="https://www.backblaze.com/">backblaze</a> and <a href="http://www.code42.com/crashplan/">crashplan</a> does not, is that i am relaying on a provider like amazon that have proven that they are a good cloud provider that is most likely not going to end there service any time soon.  I am also not capped in any way when using <code>Amazon</code> i can upload all the data i need in more or less line speed of my local network and ISP uplink. Since i am storing my data in <code>Amazon</code> at one datacenter i can also replicate the s3 bucket that i am using in combination with glacier to any other part of the world if i like where <code>Amazon</code> have datacenters. <code>arq</code> also provides me with client side encryption that allows my data to be encrypted before the data leaves by mac. So all the data that is stored in <code>Amazon</code> is encrypted and can’t be accessed or restored whiteout my encryption key.</p>

<p>The way you setup the <code>arq</code> backup is in my case to my amazon aws account, creating a AMI for the backup. When adding a destination <code>Amazon s3 glacier</code> to backup to in <code>arq</code> i am just providing the AMI keys and <code>arq</code> will create the s3 bucket and the needed rules to move all files in to <code>glacier</code> . When selecting configuring the backup it’s a bit different from <code>crashplan</code> and <code>Time Machine</code>  where they backup the full user and you have to exclude what you don’t need backed up. That is a lot that you don’t need. In <code>arq</code> you select every folder or file that you like to backup and if you are using <code>Amazon</code> you get to select if you want the data to be stored in <code>s3</code> or <code>glacier</code> you can have the same files stored in  <code>s3</code> and <code>glacier</code> if you like. Since <code>glacier</code> are slow “up to 24h” to restore you and have the files that you might need instant restore of in s3 also, you just add the same folder or files again and select s3 as the storage option.</p>

<p>when it comes to cost the <code>Amazon s3 glacier</code> option might not be the cheapest but it’s worth. Due to the proven reliability of the service that <code>Amazon</code> have provided over all the years as a cloud hosting provider.</p>

<p>one of the biggest reason for adding a service like <code>arq</code> is that Time Machine that i have is not the most persistent it fails every now and then and needs a full backup to be created from scratch.  <code>crashplan</code> is also not that fast when it comes to restore some bigger amount of data. Using a cloud provider gives me the option to backup when ever i have a internet connection.</p>

<p>what you should take away from this is that backup and encrypted versions of it is important. Even if you are not using encryption in the backup you should at least backup to one place at home and one remote. If you aren’t doing it now it’s about time to start. You will have data loss time time and that is when the backup will be so valuable.</p>
]]></content:encoded>
      <dc:date>2015-05-16T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>my travel gear</title>
      <link>http://qone.io/travel/minaal/minimalism/2015/05/03/minaal-travel-gear.html</link>
      <description><![CDATA[Travel with a Minaal. I am using packing cubes to organize my clothes. When i am packing clean clothes i am roling them and packing them in the packing cudes. This stops somewhat wrinkled clothes. The Minaal it self is greate to have some weight in. Backpacks i have used before in a Mission Workshop Vandal. That one is grate but it’s heavy. Load in the Minaal works grate with a heavy macboook pro retina 15, since it’s close to the back the for some resoce it’s not fealing that heavy. Also having lot’s of small pockets to packing in is grate, Even some hidden ones like the one in the bottom of the main compartment. When going trough the airport security the laptop pocket makes it easy to just take out and put back again.

]]></description>
      <pubDate>Sun, 03 May 2015 00:00:00 +0200</pubDate>
      <guid>http://qone.io/travel/minaal/minimalism/2015/05/03/minaal-travel-gear.html</guid>
      <content:encoded><![CDATA[<p>Travel with a <code>Minaal</code>. I am using packing cubes to organize my clothes. When i am packing clean clothes i am roling them and packing them in the packing cudes. This stops somewhat wrinkled clothes. The <code>Minaal</code> it self is greate to have some weight in. Backpacks i have used before in a <a href="http://missionworkshop.com/products/bags/backpacks/roll_top/large_vandal.php">Mission Workshop Vandal</a>. That one is grate but it’s heavy. Load in the <code>Minaal</code> works grate with a heavy macboook pro retina 15, since it’s close to the back the for some resoce it’s not fealing that heavy. Also having lot’s of small pockets to packing in is grate, Even some hidden ones like the one in the bottom of the main compartment. When going trough the airport security the laptop pocket makes it easy to just take out and put back again.</p>

<p>All of the stuff before packing. Not in the picture is the Nike Free shoes, the SCO jacket and some cables to the iPhone Kindle, and the PowerBank. 
<img src="/imgs/minaal-unpacked.jpg" alt="unpacked img" /></p>

<p>Everything packed in the smal and big packing cube. 
<img src="/imgs/minaal-pre-packing.jpg" alt="packing done in the cubes img" /></p>

<p>Now all packed in the <code>Minaal</code> 
<img src="/imgs/minaal-packing-done.jpg" alt="packing done img" /></p>

<p>List of most of the items.</p>

<ul>
  <li><a href="http://www.minaal.com/products/minaal-carry-on-bag">Minaal Carry-On</a></li>
  <li><a href="http://www.amazon.com/Exped-2010145-Crush-Drybag/dp/B0038WO4Z4">Exped Crush Drybag</a></li>
  <li><a href="http://www.amazon.com/Kindle-Paperwhite-High-Resolution-Display-Built-/dp/B00JG8H09Q">Kindle paperwhite 2</a></li>
  <li><a href="http://www.amazon.com/Ray-Ban-RB2132-Wayfarer-Polarized-Sunglasses/dp/B002Y2YSIC">RayBan Wayfarer</a></li>
  <li><a href="http://www.amazon.com/Authentic-clear-Designer-Eyeglasses-Apparel/dp/B0026PJDQE">RayBan clubmaster prescription glasses</a></li>
  <li><a href="http://www.naturkompaniet.se/brunngard-ab-storm-3-fold-automatic">umbrella </a></li>
  <li><a href="http://shop.eaglecreek.com/packitspectercube/d/1141_c_476_cl_2046">eagle creek - Pack-It Specter Cube</a></li>
  <li><a href="http://shop.eaglecreek.com/packit-cube/d/1321_cl_2529">eagle creek - Pack-It Cube</a></li>
  <li><a href="http://shop.eaglecreek.com/packit-slim-kit/d/1343_cl_2700">eagle creek - Pack-It Slim Kit</a></li>
  <li><a href="http://www.gpbatteries.com/INT/index.php?option=com_k2&amp;view=item&amp;id=347&amp;Itemid=620">Portable PowerBank GL301</a></li>
  <li><a href="http://www.chromeindustries.com/us/en/apparel/mens-apparel/chrome-storm/storm-cobra">Chrome STORM</a></li>
  <li><a href="http://store.apple.com/us/buy-mac/macbook-pro">Macbook Pro Retina 15” 2013</a></li>
  <li><a href="http://store.nike.com/dk/en_gb/pd/element-running-top/pid-872696/pgid-10294800">Nike element half-zip</a></li>
  <li><a href="http://store.nike.com/dk/en_gb/pd/free-4-flyknit-running-shoe/pid-10239055/pgid-10334425">Nike free flyknit 4.0 - Black 2015</a></li>
  <li><a href="http://eu.icebreaker.com/en/mens-tshirts/tech-t-lite-short-sleeve/100898.html">icebreaker - Tech T Lite Short Sleeve</a></li>
  <li><a href="http://eu.icebreaker.com/en/mens-tops/cool-lite™-sphere-short-sleeve-polo/102395.html">icebreaker - Cool-Lite Sphere Short Sleeve Polo</a></li>
  <li><a href="http://eu.icebreaker.com/en/mens-underwear/anatomica-boxers/100471.html">icebreaker - Anatomica Boxers</a></li>
  <li>Old Vailent shirt from <a href="http://carlings.com/">carlings</a></li>
  <li><a href="http://store.apple.com/us/buy-iphone/iphone6">iPhone 6 Plus</a></li>
  <li><a href="http://www.stadium.se/sport/lopning/loparklader/205771/soc-m-gait-led-jkt?SelectedProductUUID=wbvCROin.egAAAFIs5dsLVzO#.VUdmwc6YQXs">SOC M GAIT - Running jacket</a></li>
  <li>Socks</li>
  <li>Underwear</li>
</ul>

]]></content:encoded>
      <dc:date>2015-05-03T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>docker compose with selenium</title>
      <link>http://qone.io/docker/selenium/2015/04/24/docker-compose-selenium-hub.html</link>
      <description><![CDATA[Running a local setup with selenium hub with Firefox and Google Chrome nodes using docker-compose .  Using docker-compose makes the setup even more convenient the using the docker --link commands. Starting and stoping the setup is just easy. Scaling up and down the number of Chrome and Firefox nodes is just a command to.

]]></description>
      <pubDate>Fri, 24 Apr 2015 00:00:00 +0200</pubDate>
      <guid>http://qone.io/docker/selenium/2015/04/24/docker-compose-selenium-hub.html</guid>
      <content:encoded><![CDATA[<p>Running a local setup with selenium hub with <code>Firefox</code> and <code>Google Chrome</code> nodes using <a href="https://github.com/docker/compose">docker-compose</a> .  Using <code>docker-compose</code> makes the setup even more convenient the using the <code>docker --link</code> commands. Starting and stoping the setup is just easy. Scaling up and down the number of Chrome and Firefox nodes is just a command to.</p>

<p><code>docker-compose</code> builds a setup based on a compose file that is a yaml file. Creating the setup file for a selenium hub with two nodes can look like this.</p>

<p>Selenium hub, the web ui is exposed on port 4444 on the docker server. If you are using a local setup in <code>OS X</code> you can get the ip with <code>boot2docker ip | pbcopy</code> .</p>

<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="s">hub</span><span class="pi">:</span>
<span class="s">image</span><span class="pi">:</span> <span class="s">selenium/hub</span>
<span class="s">ports</span><span class="pi">:</span>
<span class="pi">-</span> <span class="s2">"</span><span class="s">4444:4444"</span></code></pre></div>

<p>Firefox selenium node head less</p>

<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="s">firefox</span><span class="pi">:</span>
<span class="s">image</span><span class="pi">:</span> <span class="s">selenium/node-firefox</span>
<span class="s">links</span><span class="pi">:</span>
<span class="pi">-</span> <span class="s">hub</span>
<span class="s">expose</span><span class="pi">:</span>
<span class="pi">-</span> <span class="s2">"</span><span class="s">5555"</span></code></pre></div>

<p>Google Chrome selenium node head less</p>

<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="s">chrome</span><span class="pi">:</span>
<span class="s">image</span><span class="pi">:</span> <span class="s">selenium/node-chrome</span>
<span class="s">links</span><span class="pi">:</span>
<span class="pi">-</span> <span class="s">hub</span>
<span class="s">expose</span><span class="pi">:</span>
<span class="pi">-</span> <span class="s2">"</span><span class="s">5555"</span></code></pre></div>

<p>to run the setup save it to a file named <code>docker-compose.yml</code> . Stand in the same folder as the compose file. run the following command to start the setup and send it to the background. If you like to run it in foreground remove the <code>-d</code> flag. If you don’t have the images <code>docker-compose</code> will pull the images like normal with docker</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">jone@doe:~$ </span>docker-compose up -d
Recreating selenium_hub_1...
Recreating selenium_firefox_1...
Recreating selenium_chrome_1...</code></pre></div>

<p>Now lets look and see if the docker images are running</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">jone@doe:~$  </span>docker-compose ps
Name Command State Ports
----------------------------------------------------------
selenium_chrome_1 /opt/bin/entry_point.sh Up 5555/tcp
selenium_firefox_1 /opt/bin/entry_point.sh Up 5555/tcp
selenium_hub_1 /opt/bin/entry_point.sh Up 0.0.0.0:4444-&gt;4444/tcp</code></pre></div>

<p>Lest assume that you like to scale the number of Firefox and Chrome nodes to two of each. You can use the <code>scale</code> command with <code>docker-compose</code> . The name of the nodes are used to scale up and down the number of docker instances that are running.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">jone@doe:~$ </span>docker-compose scale <span class="nv">firefox</span><span class="o">=</span>2 <span class="nv">chrome</span><span class="o">=</span>2
Creating selenium_firefox_2...
Starting selenium_firefox_2...
Creating selenium_chrome_2...
Starting selenium_chrome_2...</code></pre></div>

<p>Now lets stop the setup. using the <code>stop</code> command with <code>docker-compose</code></p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">jone@doe:~$ </span>docker-compose stop
Stopping selenium_chrome_2...
Stopping selenium_chrome_1...
Stopping selenium_firefox_2...
Stopping selenium_firefox_1...
Stopping selenium_hub_1...</code></pre></div>

<p>link to docker-compose file <a href="https://github.com/mad01/boilerplates/blob/master/docker/compose/selenium/docker-compose.yml">source</a></p>
]]></content:encoded>
      <dc:date>2015-04-24T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>a theory of productivity</title>
      <link>http://qone.io/productivity/2015/04/18/theory-of-productivity.html</link>
      <description><![CDATA[How to think about productivity. Lest take a example a math test. The test contains 20 problems, the total assumed time with no interruption to finish the test with all correct answers is 60 minutes. That is all god. Now lest assume that we mix in interruption in to the factor. At 5 times at random times you will get interrupted. The interruption will be to answer a random question, that will take 1-2 min to answer. You are then to return to the test. If we now assume that the interruption will be done so that you get interrupted when you are close to a answer. This interruption will result in 3 of 5 tests that you got interrupted no will be incorrect. For every interruption you also had to restart the current question you were on since you forgot the answer you almost had.

]]></description>
      <pubDate>Sat, 18 Apr 2015 00:00:00 +0200</pubDate>
      <guid>http://qone.io/productivity/2015/04/18/theory-of-productivity.html</guid>
      <content:encoded><![CDATA[<p>How to think about productivity. Lest take a example a math test. The test contains 20 problems, the total assumed time with no interruption to finish the test with all correct answers is 60 minutes. That is all god. Now lest assume that we mix in interruption in to the factor. At 5 times at random times you will get interrupted. The interruption will be to answer a random question, that will take 1-2 min to answer. You are then to return to the test. If we now assume that the interruption will be done so that you get interrupted when you are close to a answer. This interruption will result in 3 of 5 tests that you got interrupted no will be incorrect. For every interruption you also had to restart the current question you were on since you forgot the answer you almost had.</p>

<ul>
  <li>time per test no interruptions (60 min / 20 tests) = 3 min / test</li>
  <li>time per test when interuppted (60 min / 20 tests) + ( 5 interruptions * 3 min) = 3.75 min / test. And 3 of 20 tests were incorrect.</li>
</ul>

<p>Conclusion here if you think of productivity like this it will be clear that the result of a uninterrupted person will be better then the interrupted one. So next time you send a email to a college go over and ask did you se my email. think again and leat the guy/girl get to it when they have time. In the majority of all cases that you like a answer to a email you do not really need it at this instance.</p>

<p>If you also think of the interruption as a notification on your phone/laptop you louse focus and look on Facebook, twitter read some news. that is more close to the normal work day. And the math test is a new feature or a bug that you are trying to fix.</p>
]]></content:encoded>
      <dc:date>2015-04-18T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>html email with aws ses and boto</title>
      <link>http://qone.io/amazon/aws/ses/python/boto/2015/04/11/aws-ses-python-boto.html</link>
      <description><![CDATA[Sending html email with amazon ses simple email service using the python module boto.

]]></description>
      <pubDate>Sat, 11 Apr 2015 00:00:00 +0200</pubDate>
      <guid>http://qone.io/amazon/aws/ses/python/boto/2015/04/11/aws-ses-python-boto.html</guid>
      <content:encoded><![CDATA[<p>Sending html email with amazon ses <code>simple email service</code> using the python module <a href="https://github.com/boto/boto">boto</a>.</p>

<p>to be able to start using the <code>ses</code> service you need to verify two emails. The first you what is the address that you like to use to send from. The second is the one you like to receive it in. To be able to verify that addresses you need a valid address since a validation email will be sent to the address. after that is done, you can start yo use the mail addresses. At this stage you will only have a sandbox version of <code>ses</code>, you will only be able to send/receive from the verified addressed. at a later state you can request production that will open to send email to any one. When in the sandbox state of <code>ses</code> you will only have a limit of 200 emails every 24h.</p>

<p>the input variables that will be need to send a html email, is a html file, a subject, a address that you send from, a list of addresses to send to. at this state only the list of the verified addresses will work, and last the aws region.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">ses_send_html_mail</span><span class="p">(</span>
	<span class="n">htmlFile</span><span class="o">=</span><span class="s">"foobar.html"</span><span class="p">,</span>
	<span class="n">subject</span><span class="o">=</span><span class="s">"example"</span><span class="p">,</span>
	<span class="n">send_from</span><span class="o">=</span><span class="s">"from@example.com"</span><span class="p">,</span>
	<span class="n">send_to</span><span class="o">=</span><span class="p">[</span><span class="s">"to@example.com"</span><span class="p">],</span>
	<span class="n">aws_region</span><span class="o">=</span><span class="s">"us-west-2"</span><span class="p">):</span></code></pre></div>

<p>Now lets assing the needed variables to the <code>MIMEMultipart</code>, subject, to and from.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">message</span> <span class="o">=</span> <span class="n">MIMEMultipart</span><span class="p">()</span>
	<span class="n">message</span><span class="p">[</span><span class="s">"Subject"</span><span class="p">]</span> <span class="o">=</span> <span class="n">subject</span>
	<span class="n">message</span><span class="p">[</span><span class="s">"From"</span><span class="p">]</span> <span class="o">=</span> <span class="n">send_from</span>
	<span class="n">message</span><span class="p">[</span><span class="s">"To"</span><span class="p">]</span> <span class="o">=</span> <span class="n">send_to</span></code></pre></div>

<p>The html file needs to be passed as a string and to do that we can open that file with .read() . The MIMEText takes a string as the first input variable, add a optional second string that identifies the type of the first string, here you set html. There is a list of <a href="http://docs.aws.amazon.com/ses/latest/DeveloperGuide/mime-types.html">unsupported attachment types</a> that can’t be used everything else is supported.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">html</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">htmlFile</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
	<span class="n">attachment</span> <span class="o">=</span> <span class="n">MIMEText</span><span class="p">(</span><span class="n">html</span><span class="p">,</span> <span class="s">'html'</span><span class="p">)</span>
	<span class="n">message</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">attachment</span><span class="p">)</span></code></pre></div>

<p>Now the last step to connect to amazon aws <code>ses</code> and send the email.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">aws_connect</span> <span class="o">=</span> <span class="n">boto</span><span class="o">.</span><span class="n">ses</span><span class="o">.</span><span class="n">connect_to_region</span><span class="p">(</span><span class="n">aws_region</span><span class="p">)</span>
	<span class="n">send_mail</span> <span class="o">=</span> <span class="n">aws_connect</span><span class="o">.</span><span class="n">send_raw_email</span><span class="p">(</span>
		<span class="n">message</span><span class="o">.</span><span class="n">string</span><span class="p">(),</span>
		<span class="n">source</span><span class="o">=</span><span class="n">message</span><span class="p">[</span><span class="s">'From'</span><span class="p">],</span>
		<span class="n">destinations</span><span class="o">=</span><span class="n">message</span><span class="p">[</span><span class="s">'To'</span><span class="p">]</span>
	<span class="p">)</span>
	<span class="k">return</span> <span class="n">send_mail</span></code></pre></div>

<p>source to example <a href="https://github.com/mad01/boilerplates/blob/master/python/aws.py">link</a></p>
]]></content:encoded>
      <dc:date>2015-04-11T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>bulding a debian docker base build for a flask app</title>
      <link>http://qone.io/docker/debian/2015/04/03/docker_basic_build.html</link>
      <description><![CDATA[Start by pulling down a debian base build. docker pull debian:8.0 .Creating a Dockerfile for a base build to a python flask app. based on debian 8

]]></description>
      <pubDate>Fri, 03 Apr 2015 00:00:00 +0200</pubDate>
      <guid>http://qone.io/docker/debian/2015/04/03/docker_basic_build.html</guid>
      <content:encoded><![CDATA[<p>Start by pulling down a debian base build. <code>docker pull debian:8.0</code> .Creating a <code>Dockerfile</code> for a base build to a python flask app. based on debian 8</p>

<div class="highlight"><pre><code class="language-docker" data-lang="docker">FROM debian:8.0

RUN apt-get -y update \
	&amp;&amp; apt-get upgrade -y \
	&amp;&amp; apt-get install -y \
		python-setuptools \
		python-pip

RUN pip install flask \
				flask-restful \
				pymongo</code></pre></div>

<p>build the docker base image. the <code>-t</code> gives the build a name, the <code>--rm=true</code> means “Remove intermediate containers after a successful build”, the <code>--no-cache=false</code> means “Do not use cache when building the image”. the dot means look for the <code>Dockerfile</code> in the current folder. using the flags together means that all of the steps in the docker build is done every time since i want to make the full docker build. Not just from a commit a few steps in to the build.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">docker build -t foobar --rm<span class="o">=</span><span class="nb">true</span> --no-cache<span class="o">=</span><span class="nb">false</span> .</code></pre></div>

<p>build the flask app docker image based on the base docker build foobar.</p>

<div class="highlight"><pre><code class="language-docker" data-lang="docker">FROM foobar

RUN mkdir -p /opt/app
COPY app* /opt/app

WORKDIR /opt/app/
ENTRYPOINT ["python", "api.py"]</code></pre></div>

<p>building the api docker image. the assumption is that there is a folder named app in the same folder as the <code>Dockerfile</code>. This folder contains the api and the support modules and files needed for the api. ‘COPY app* /opt/app’ will copy all files in the app folder and copy them to the /opt/app folder in the docker image. using the <code>WORKDIR</code> and <code>ENTRYPOINT</code> makes the docker image start the api on start of the image.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">docker build -t api --rm<span class="o">=</span><span class="nb">true</span> --no-cache<span class="o">=</span><span class="nb">false</span> .</code></pre></div>

<p>Now you can start the docker image named api and the api will be started when the docker image is started.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">docker run -i api</code></pre></div>

]]></content:encoded>
      <dc:date>2015-04-03T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>python flask rest api auth option storing in mongoDB 3.0 running on docker</title>
      <link>http://qone.io/python/rest/docker/mongodb/2015/03/28/python-flask-mongoDB-restApi-auth.html</link>
      <description><![CDATA[I have been looking on a way to auth rest api endpoints that needs to have auth. I will be using Python with flask, flask-restful, yaml, pymongo and passlib. passlib will be used to salt the password that will be stored in mondoDB. A note here is that i will be using mongoDB 3.0 which means that you have to install the un released pymongo 3.0. here is the packets and links you need.

]]></description>
      <pubDate>Sat, 28 Mar 2015 00:00:00 +0100</pubDate>
      <guid>http://qone.io/python/rest/docker/mongodb/2015/03/28/python-flask-mongoDB-restApi-auth.html</guid>
      <content:encoded><![CDATA[<p>I have been looking on a way to auth rest api endpoints that needs to have auth. I will be using Python with flask, flask-restful, yaml, pymongo and passlib. passlib will be used to salt the password that will be stored in mondoDB. A note here is that i will be using mongoDB 3.0 which means that you have to install the un released pymongo 3.0. here is the packets and links you need.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">pip install https://github.com/mongodb/mongo-python-driver/archive/3.0b1.tar.gz
pip install PyYaml
pip install flask-restful
pip install flask
pip install passlib</code></pre></div>

<p>i am installing MongoDB 3.0 using docker. And starting the db. i should end up with one running mondoDB 3.0 named <code>mongo</code>. i can check that with <code>docker ps</code></p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">docker pull mongo
docker run --name mongo -d -p 27017:27017 mongo:3.0</code></pre></div>

<p>Starting with the mongo module to add a user to a collection in mongo. The <code>createOrUpdateUser</code> function creates a checks if the user exists in mongo. If that is the case it will update it and add a new time to the updates so i have stored the created date and last update with a timestamp. If the user is not in the db collection one will be created. This function will return the ObjectId of the user that later will be used to get the user.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">createOrUpdateUser</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">saltedKey</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">database</span><span class="o">=</span><span class="s">''</span><span class="p">):</span>
    <span class="n">client</span> <span class="o">=</span> <span class="n">MongoClient</span><span class="p">(</span><span class="n">host</span><span class="p">)</span>
    <span class="n">db</span> <span class="o">=</span> <span class="n">client</span><span class="p">[</span><span class="n">database</span><span class="p">]</span>
    <span class="n">checkUser</span> <span class="o">=</span> <span class="p">[</span><span class="n">doc</span> <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">db</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">find</span><span class="p">({</span><span class="s">"username"</span><span class="p">:</span> <span class="n">username</span><span class="p">})]</span>
    <span class="k">if</span> <span class="n">checkUser</span><span class="p">:</span>
        <span class="n">userData</span> <span class="o">=</span> <span class="n">checkUser</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">db</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">replace_one</span><span class="p">(</span>
            <span class="p">{</span>
                <span class="s">"username"</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span>
                <span class="s">"saltedKey"</span><span class="p">:</span> <span class="n">userData</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'saltedKey'</span><span class="p">),</span>
            <span class="p">},</span> <span class="p">{</span>
                <span class="s">"username"</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span>
                <span class="s">"saltedKey"</span><span class="p">:</span> <span class="n">saltedKey</span><span class="p">,</span>
                <span class="s">"created"</span><span class="p">:</span> <span class="n">userData</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'created'</span><span class="p">),</span>
                <span class="s">"updated"</span><span class="p">:</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">utcnow</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">)</span>
        <span class="n">userObjectId</span> <span class="o">=</span> <span class="p">[</span><span class="n">doc</span> <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">db</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">find</span><span class="p">({</span><span class="s">"username"</span><span class="p">:</span> <span class="n">username</span><span class="p">})][</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'_id'</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">userObjectId</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">"saltedKey"</span><span class="p">:</span> <span class="n">saltedKey</span><span class="p">,</span>
            <span class="s">"created"</span><span class="p">:</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">utcnow</span><span class="p">(),</span>
            <span class="s">"updated"</span><span class="p">:</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">utcnow</span><span class="p">(),</span>
            <span class="s">"username"</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span>
        <span class="p">}</span>
        <span class="n">userObjectId</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">insert_one</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">.</span><span class="n">inserted_id</span>
        <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">userObjectId</span><span class="p">)</span></code></pre></div>

<p>Next is the <code>getUser</code> from mongo using the ObjectId. it will return the full json document stored in mongo.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">getUser</span><span class="p">(</span><span class="n">userObjectId</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">database</span><span class="o">=</span><span class="s">''</span><span class="p">):</span>
    <span class="s">"""get user json ducument from mongo"""</span>
    <span class="n">client</span> <span class="o">=</span> <span class="n">MongoClient</span><span class="p">(</span><span class="n">host</span><span class="p">)</span>
    <span class="n">db</span> <span class="o">=</span> <span class="n">client</span><span class="p">[</span><span class="n">database</span><span class="p">]</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">doc</span> <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">db</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">find</span><span class="p">({</span><span class="s">"_id"</span><span class="p">:</span> <span class="n">ObjectId</span><span class="p">(</span><span class="n">userObjectId</span><span class="p">)})][</span><span class="mi">0</span><span class="p">]</span></code></pre></div>

<p>To create the use and salt the password i am using <code>passlib</code> i’m giving a username, a password, and the mongo host, I’m then using the <code>createOrUpdateUser</code> to add the user in to a collection called endpoints. the function returns a dict that contains the ObjectId if the new of updated user.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">addUser</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">mongo</span><span class="o">=</span><span class="s">''</span><span class="p">):</span>
    <span class="n">passwordSalted</span> <span class="o">=</span> <span class="n">apps</span><span class="o">.</span><span class="n">custom_app_context</span><span class="o">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
    <span class="n">userObjectId</span> <span class="o">=</span> <span class="n">createOrUpdateUser</span><span class="p">(</span>
        <span class="n">username</span><span class="p">,</span>
        <span class="n">saltedKey</span><span class="o">=</span><span class="n">passwordSalted</span><span class="p">,</span>
        <span class="n">host</span><span class="o">=</span><span class="n">mongo</span><span class="p">,</span>
        <span class="n">database</span><span class="o">=</span><span class="s">'endpoints'</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="p">{</span><span class="s">"userObjectId"</span><span class="p">:</span> <span class="n">userObjectId</span><span class="p">}</span></code></pre></div>

<p>To validate that the password is current I’m using <code>getUser</code> to get the salted password from mongo in the collection endpoints where i stored that user data. the function is then using a validation option of the salt function that takes the salted password and the password to check if it’s correct.  if the verification passes a boolean True is returned else you get a False.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">validateUserKey</span><span class="p">(</span><span class="n">userObjectId</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">mongo</span><span class="o">=</span><span class="s">''</span><span class="p">):</span>
    <span class="n">salt</span> <span class="o">=</span> <span class="n">getUser</span><span class="p">(</span>
        <span class="n">userObjectId</span><span class="p">,</span>
        <span class="n">host</span><span class="o">=</span><span class="n">mongo</span><span class="p">,</span>
        <span class="n">database</span><span class="o">=</span><span class="s">"endpoints"</span>
    <span class="p">)</span>
    <span class="n">valid</span> <span class="o">=</span> <span class="n">apps</span><span class="o">.</span><span class="n">custom_app_context</span><span class="o">.</span><span class="n">verify</span><span class="p">(</span>
        <span class="n">password</span><span class="p">,</span>
        <span class="n">salt</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'saltedKey'</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">valid</span></code></pre></div>

<p>Lest look on the REST api. I am using the <a href="http://flask.pocoo.org/">flask</a> and <a href="https://flask-restful.readthedocs.org/en/0.3.2/">flask restful</a> packets to create the REST api. The <code>protected</code> class <strong>init</strong> have two keys <code>oid</code> and <code>key</code> that should be in the http payload. in the get function i am using “self.reqparse.parse_args(strict=True)” that means that the oid and key key/value have to be in the get payload or the request will be rejected. i am then checking that the key for the oid is valid using <code>validateCheck</code> if it’s valid you get the {“key”: “valid”} else you get http 401. i am then adding that class to the “api.add_resource(protected, ‘/api/protected’)” which adds a REST endpoint <code>/api/protected</code>valid</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">protected</span><span class="p">(</span><span class="n">Resource</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">reqparse</span> <span class="o">=</span> <span class="n">reqparse</span><span class="o">.</span><span class="n">RequestParser</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">reqparse</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'oid'</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">reqparse</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'key'</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">mongo</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'mongoDB'</span><span class="p">)</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'host'</span><span class="p">)</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">protected</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">args</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">reqparse</span><span class="o">.</span><span class="n">parse_args</span><span class="p">(</span><span class="n">strict</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">validateCheck</span> <span class="o">=</span> <span class="n">salt</span><span class="o">.</span><span class="n">validateUserKey</span><span class="p">(</span>
            <span class="n">userObjectId</span><span class="o">=</span><span class="n">args</span><span class="o">.</span><span class="n">oid</span><span class="p">,</span>
            <span class="n">password</span><span class="o">=</span><span class="n">args</span><span class="o">.</span><span class="n">key</span><span class="p">,</span>
            <span class="n">mongo</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">mongo</span>
        <span class="p">)</span>
        <span class="k">if</span> <span class="n">validateCheck</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="s">"key"</span><span class="p">:</span> <span class="s">"valid"</span><span class="p">}</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">abort</span><span class="p">(</span><span class="mi">401</span><span class="p">)</span>

<span class="n">api</span><span class="o">.</span><span class="n">add_resource</span><span class="p">(</span><span class="n">protected</span><span class="p">,</span> <span class="s">'/api/protected'</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span></code></pre></div>

<p>Looking on a test for this to checks that a user is valid if the correct key/oid is passed and then if the wrong key/right oid is passed it can look like this. The assumption here is that the REST api is started and running on localhost and that the docker mongo:3.0 is running on 192.168.59.103. In the <code>setUpClass</code> i am declaring all variables to self that will be used in test. i am running the tests with <a href="https://nose.readthedocs.org/en/latest/">nosetests</a>. The first test <code>testAccessValidKey</code> passed the correct key/oid and should get back http 200. the second test should fail the validation, it passes a invalid key and a valid oid, the api should return http 401.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">checkAccess</span><span class="p">(</span><span class="n">oid</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="s">''</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s">"oid"</span><span class="p">:</span> <span class="n">oid</span><span class="p">,</span> <span class="s">"key"</span><span class="p">:</span> <span class="n">password</span><span class="p">}</span>
    <span class="k">return</span> <span class="n">get</span><span class="p">(</span><span class="s">'http://'</span> <span class="o">+</span> <span class="n">host</span> <span class="o">+</span> <span class="s">':5000/api/protected'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">TestRestGetCalls</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>

    <span class="nd">@classmethod</span>       
    <span class="k">def</span> <span class="nf">setUpClass</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">confFile</span> <span class="o">=</span> <span class="nb">file</span><span class="p">(</span><span class="s">'tests/test_salt.yaml'</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span>
        <span class="n">conf</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">confFile</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">mongo</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'mongoDB'</span><span class="p">)</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'host'</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">api</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'api'</span><span class="p">)</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'host'</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="s">"foo"</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">user</span> <span class="o">=</span> <span class="s">"bar"</span>
        <span class="n">userDoc</span> <span class="o">=</span> <span class="n">salt</span><span class="o">.</span><span class="n">addUser</span><span class="p">(</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">user</span><span class="p">,</span>
            <span class="n">password</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">key</span><span class="p">,</span>
            <span class="n">mongo</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">mongo</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">oid</span> <span class="o">=</span> <span class="n">userDoc</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">"userObjectId"</span><span class="p">)</span>

    <span class="nd">@classmethod</span>       
    <span class="k">def</span> <span class="nf">tearDownClass</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">testAccessValidKey</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">httpGet</span> <span class="o">=</span> <span class="n">checkAccess</span><span class="p">(</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">oid</span><span class="p">,</span>
            <span class="n">password</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">key</span><span class="p">,</span>
            <span class="n">host</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">api</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="n">httpGet</span><span class="o">.</span><span class="n">status_code</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">testAccessInValidKey</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">httpGet</span> <span class="o">=</span> <span class="n">checkAccess</span><span class="p">(</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">oid</span><span class="p">,</span>
            <span class="n">password</span><span class="o">=</span><span class="s">"foobar"</span><span class="p">,</span>
            <span class="n">host</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">api</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="mi">401</span><span class="p">,</span> <span class="n">httpGet</span><span class="o">.</span><span class="n">status_code</span><span class="p">)</span></code></pre></div>

<p>the source for all the code can be found on my github here <a href="https://github.com/mad01/boilerplates/tree/master/python">Link</a></p>
]]></content:encoded>
      <dc:date>2015-03-28T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>productivity with Pomodoro and micro checklist</title>
      <link>http://qone.io/productivity/2015/03/25/productivity.html</link>
      <description><![CDATA[I have recently started to use a productivity theory called Pomodoro. The principe with Pomodoro is that you work focused on something for 25 min, having a micro break for 5 min and then continue. After 4 sessions you have a longer break for 15 min. I have been using this in combination with a micro checklist. What i mean with micro checklist is to have a check list like this.

]]></description>
      <pubDate>Wed, 25 Mar 2015 00:00:00 +0100</pubDate>
      <guid>http://qone.io/productivity/2015/03/25/productivity.html</guid>
      <content:encoded><![CDATA[<p>I have recently started to use a productivity theory called <code>Pomodoro</code>. The principe with Pomodoro is that you work focused on something for 25 min, having a micro break for 5 min and then continue. After 4 sessions you have a longer break for 15 min. I have been using this in combination with a <code>micro checklist</code>. What i mean with <code>micro checklist</code> is to have a check list like this.</p>

<p><code>micro checklist</code> example</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[]</span> big task1
	<span class="o">[]</span> small task1
	<span class="o">[]</span> small task2
	<span class="o">[]</span> small task3</code></pre></div>

<p>By making a list of small task that should take less then 25 min the best is if you can fit a few in since you want to try to finish the task in the <code>Pomodoro</code> session. after each micro tank is done you can check it by adding a x inside <code>[X]</code>. The important thing here is to have the task strict enough to not have to think about what to do when you are in the <code>Pomodoro</code> session. When you are in the <code>Pomodoro</code> session you don’t want do have to be interrupted since you will get out of your flow.</p>

<p>during the session you should not do anything then the task that you have defined. NO email, chat, news sites Nothing, that is what you can use your break for. You may ask how about you colleagues, and your manager, you have to explain what you are planing to do or are doing. It will not be that hard to get them onboard when they understand that this is something that you are doing to get more done and be as productive as possible. The most you will be unavailable is 25 min.</p>

<p>if you feel that the sessions are to short you can adjust to a bit to fit you better but then have a bit longer breaks after each session. For me having 25 min works well, that is what you should do if you want to follow `Pomodoro. If you can’t get done with the micro task you should probably split the tasks in even smaller chunks</p>

<p>i am using a application <code>Pomodoro+</code> you can find it on the Apples Appstore. There is a free version and a payed one. i recommend getting the payed one since you will give back something to the developer.</p>
]]></content:encoded>
      <dc:date>2015-03-25T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>pitfalls when writing commandline tools</title>
      <link>http://qone.io/command/line/tools/2015/03/21/command-line-tools-pitfalls.html</link>
      <description><![CDATA[Common pitfalls when using template files/support files in the working dir of the script, is easy to miss when you are writing command line tools. In this case using python. Some of the more annoying mistakes is when you have template files stores and referred to in a script, you assume that the person that will use you script stands in the folder were the script is. lest assume that we are using a file template.html in a folder named foobar. of corse this will not work if you are running the script from somewhere else. I normally stand in the same folder as the script when i am developing a tool. When you then stand in some other folder everything will fail since you are not giving the absolute path to the template files.

]]></description>
      <pubDate>Sat, 21 Mar 2015 00:00:00 +0100</pubDate>
      <guid>http://qone.io/command/line/tools/2015/03/21/command-line-tools-pitfalls.html</guid>
      <content:encoded><![CDATA[<p>Common pitfalls when using template files/support files in the working dir of the script, is easy to miss when you are writing command line tools. In this case using <code>python</code>. Some of the more annoying mistakes is when you have template files stores and referred to in a script, you assume that the person that will use you script stands in the folder were the script is. lest assume that we are using a file template.html in a folder named foobar. of corse this will not work if you are running the script from somewhere else. I normally stand in the same folder as the script when i am developing a tool. When you then stand in some other folder everything will fail since you are not giving the absolute path to the template files.</p>

<p>there is a few option here and it’s to either only work if you standing in the correct folder, fix the paths to work anyway, or last a install script that creates the env you need and have a static path that can be used in any system.</p>

<p>you have a few options here were to store scripts and template/files that you need to read in linux.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">/usr/local/sbin <span class="c"># custom script for root</span>
/usr/local/bin 	<span class="c"># custom script for all users</span>
/usr/local/share <span class="c"># store support files like templates for scripts recommended to use a subfolder</span>
/usr/share <span class="c"># store support files like templates for scripts recommended to use a subfolder</span></code></pre></div>

<p>i will assume that you want a custom script with a support template file. the script should be for all users. that means the script should be stored in <code>/usr/local/bin</code> and i will store the support template in a subfolder in <code>/usr/share</code>. this is how i can look to accomplish that. first i remove the old files and then write the new version.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/bash</span>
sudo rm -rf /usr/local/bin/foo.py /usr/local/bin/bar.py
sudo rm -rf /usr/share/foobar

sudo mkdir /usr/share/foobar
sudo cp -r template /usr/share/foobar
sudo cp foo.py bar.py /usr/local/bin</code></pre></div>

<p>one other option is if you don’t want to install the script but still like to call the script from anywhere and still have template files working. you can use <code>os.path.dirname(os.path.abspath(__name__))</code> in the python script to give the working dir of the script, and then using that to add to the path of template files. this is how it can look</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">scriptDir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">__name__</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">readFile</span><span class="p">(</span><span class="n">inFile</span><span class="p">):</span>
	<span class="s">"""read file in subfolder of working dir of script"""</span>
	<span class="n">inFile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">scriptDir</span> <span class="o">+</span> <span class="s">'/foobar/template.html'</span><span class="p">,</span>
		<span class="s">'r'</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
	<span class="k">return</span> <span class="n">inFile</span>

<span class="k">def</span> <span class="nf">writeFile</span><span class="p">(</span><span class="n">outFile</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
	<span class="s">"""write file in working dir of script"""</span>
	<span class="n">writeFile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">scriptDir</span> <span class="o">+</span> <span class="s">'/'</span> <span class="o">+</span> <span class="n">outFile</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span>
	<span class="k">for</span> <span class="n">lines</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
		<span class="n">writeFile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>

	<span class="n">writeFile</span><span class="o">.</span><span class="n">close</span><span class="p">()</span></code></pre></div>

]]></content:encoded>
      <dc:date>2015-03-21T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>dynamic test generation</title>
      <link>http://qone.io/testing/python/2015/03/15/test-generation.html</link>
      <description><![CDATA[I what to show a api template i did to generate api post tests with a random varible lenght hex value as the payload in a http post request. In this case i am using python, in compination with nose, to run my tests. Note you can run this without nose but you will get all prints from the support libs. Nose will supress the prints if the test passes. To change to varible number of tests that you can generate you just change the random_data input integer. The purpose of this is to be able to check that a REST api can take the random input length of the hex payload. in the testmap you gets a dict that contains a random, int, float, hex, password.

]]></description>
      <pubDate>Sun, 15 Mar 2015 00:00:00 +0100</pubDate>
      <guid>http://qone.io/testing/python/2015/03/15/test-generation.html</guid>
      <content:encoded><![CDATA[<p>I what to show a api template i did to generate api post tests with a random varible lenght hex value as the payload in a http post request. In this case i am using python, in compination with <a href="https://nose.readthedocs.org">nose</a>, to run my tests. Note you can run this without nose but you will get all prints from the support libs. Nose will supress the prints if the test passes. To change to varible number of tests that you can generate you just change the <code>random_data</code> input integer. The purpose of this is to be able to check that a REST api can take the random input length of the hex payload. in the testmap you gets a dict that contains a random, int, float, hex, password.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">TestGenClass</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">def</span> <span class="nf">dynamic_gen</span><span class="p">(</span><span class="n">test_assert</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">dynamic_test_method</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">shared</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">"api"</span><span class="p">:</span> <span class="s">"post"</span><span class="p">,</span>
            <span class="s">"host"</span><span class="p">:</span> <span class="s">"httpbin.org"</span>
        <span class="p">}</span>
        <span class="n">result_code</span><span class="p">,</span> <span class="n">http_data</span> <span class="o">=</span> <span class="n">http_post</span><span class="p">(</span>
            <span class="n">shared</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'host'</span><span class="p">),</span>
            <span class="n">api</span><span class="o">=</span><span class="n">shared</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'api'</span><span class="p">),</span>
            <span class="n">payload</span><span class="o">=</span><span class="p">{</span><span class="s">"hex"</span><span class="p">:</span> <span class="n">test_assert</span><span class="p">}</span>
        <span class="p">)</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">http_data</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">result_code</span><span class="p">),</span> <span class="mi">200</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span>
            <span class="nb">unicode</span><span class="p">(</span><span class="n">test_assert</span><span class="p">),</span>
            <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'data'</span><span class="p">))</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'hex'</span><span class="p">)</span>
        <span class="p">)</span>

    <span class="k">return</span> <span class="n">dynamic_test_method</span>

<span class="n">testmap</span> <span class="o">=</span> <span class="n">random_data</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">parms</span> <span class="ow">in</span> <span class="n">testmap</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">dynamic_gen</span><span class="p">(</span><span class="n">parms</span><span class="p">[</span><span class="s">"hex"</span><span class="p">])</span>
    <span class="n">data</span><span class="o">.</span><span class="n">__name__</span> <span class="o">=</span> <span class="s">"test_{0}"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
    <span class="n">data</span><span class="o">.</span><span class="n">__doc__</span> <span class="o">=</span> <span class="s">"test_{0}"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
    <span class="nb">setattr</span><span class="p">(</span><span class="n">TestGenClass</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="n">__name__</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
    <span class="k">del</span> <span class="n">data</span></code></pre></div>

<p>link to <a href="https://github.com/mad01/boilerplates/blob/master/python/test_api_post.py">source</a>.</p>
]]></content:encoded>
      <dc:date>2015-03-15T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>stay up to date with tech</title>
      <link>http://qone.io/tech/news/2015/03/09/stay-up-tp-date-with-tech.html</link>
      <description><![CDATA[Keeping up with tech. I like read and be aware of what is going on in tech, security, apple, linux, development, testing, and some devops related topics. I have attached a OPML file from my feedly where i get most of my news if your interested. I am frequently listening to a few podcasts, I’m using a awesome podcast iPhone` app overcast to litsen. The smart speed saves some time, voice boost helps to boost the voice those is the features i think it best for me.

]]></description>
      <pubDate>Mon, 09 Mar 2015 00:00:00 +0100</pubDate>
      <guid>http://qone.io/tech/news/2015/03/09/stay-up-tp-date-with-tech.html</guid>
      <content:encoded><![CDATA[<p>Keeping up with tech. I like read and be aware of what is going on in tech, security, apple, linux, development, testing, and some devops related topics. I have attached a <code>OPML</code> file from my <a href="https://feedly.com">feedly</a> where i get most of my news if your interested. I am frequently listening to a few podcasts, I’m using a awesome podcast iPhone` app <a href="https://overcast.fm/">overcast</a> to litsen. The smart speed saves some time, voice boost helps to boost the voice those is the features i think it best for me.</p>

<p>One of the more important areas for me is the security blogs and news one medium is the podcast <a href="https://www.grc.com/securitynow.htm">Security Now</a>. The reason for this is to be aware and understand security vulnerabilities, what you can do to patch and protect you and your systems, from the new and bad vulnerabilities that gets public mainly when related to linux and open source since that is what i am using.</p>

<p>Also keeping up with testing blogs and development blogs is important to get useful information about new things and new cool ways to do development and testing.</p>

<p>One more thing it’s a service called <a href="http://www.meetup.com">Meetup</a>, It’s a service that offers you the option to connect with local user groups. In my case it’s to get in contact with interesting pepole network and the most important share knowledge. Many of the tech/development related groups have a lot of interesting events with speakers that share about technologies they use.</p>

<p>Podcasts</p>

<ul>
  <li><a href="http://www.relay.fm/clockwise">Clockwise</a></li>
  <li><a href="https://www.grc.com/securitynow.htm">Security Now</a></li>
  <li><a href="http://atp.fm/">Accidental Tech Podcast</a></li>
  <li><a href="https://www.developertea.com/">Developer Tea</a></li>
  <li><a href="http://twit.tv/show/this-week-in-tech">This Week in Tech</a></li>
  <li><a href="http://elementopie.com/everyday-linux-episodes">Everyday Linux</a></li>
  <li><a href="http://kodsnack.se/">Kodsnack</a></li>
  <li><a href="http://www.macpowerusers.com/">Mac Power Users</a></li>
  <li><a href="http://twit.tv/show/macbreak-weekly">MacBreak Weekly</a></li>
  <li><a href="http://twit.tv/">This Week in Enterprice Tech</a></li>
  <li><a href="http://twit.tv/show/triangulation">Triangulation</a></li>
</ul>

<p>rss</p>

<ul>
  <li><a href="/share/feedly.opml">opml file</a></li>
</ul>
]]></content:encoded>
      <dc:date>2015-03-09T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>cold brew coffee</title>
      <link>http://qone.io/coffee/coldbrew/2015/03/08/cold-brew-coffee.html</link>
      <description><![CDATA[Brew some easy and good cold brew coffee. This can be used for just plain ice coffee, ice latte, and many more. A note it that it will be high in caffeine. What you need is.

]]></description>
      <pubDate>Sun, 08 Mar 2015 00:00:00 +0100</pubDate>
      <guid>http://qone.io/coffee/coldbrew/2015/03/08/cold-brew-coffee.html</guid>
      <content:encoded><![CDATA[<p>Brew some easy and good cold brew coffee. This can be used for just plain ice coffee, ice latte, and many more. A note it that it will be high in caffeine. What you need is.</p>

<ul>
  <li>a one liter jar</li>
  <li>coffee beans <code>newly roasted preferred</code></li>
  <li>water <code>filtered preferred</code></li>
  <li>a french press</li>
</ul>

<p>My favourite coffee roastery is called <a href="http://www.dropcoffee.com/">dropcoffee</a>. it’s a small roastery in Stockholm. They always have something interesting to offer and always has some new coffee roast to try. Most of the roasts is lighter roasts look them up here is you like to try. <a href="http://www.dropcoffee.com/">dropcoffee</a></p>

<p>Start by milling coffee. you what medium size grounds. Put the grounds in the jar, you what to have the jar filled 1/4 with coffee grounds. Now fill the jar with water. stir the coffee grounds so all of it gets wet. A note is if the coffee is roasted the a few days before you should <em>NOT</em> close the jar since it grounds will release some <code>CO2</code>. Now the hard part is to wait. You should leave it for minimum of 24 hours and up to 48 hours. Store it in the fridge or somewhere cold. After the 24 to 48 hours use the french press to separate the water and coffee grounds. You can now store it in the fridge for up to a week.</p>

]]></content:encoded>
      <dc:date>2015-03-08T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>control temptation @ work</title>
      <link>http://qone.io/temptation/2015/03/04/control-temptation-at-work.html</link>
      <description><![CDATA[So what do i mean with control temptation @ work. When working with development you have to get it to a problem and try to solve it. Doing that requires that you can stay focused on the task in hand to get the most out of it. Lets say you take 10 - 15 min to get it to the right flow. During your day you have email, facebook, online newspapers, chat systems like IRC, HipChat, Skype, colleagues and many others things that can make you get out of your productive flow. The result of this will mean for every time you lose the 10 - 15 min to get in to the productive flow, over and over. And you may end up at the end of that day and realizing that you did not get done with what you wanted. That is not fun for anyone.

]]></description>
      <pubDate>Wed, 04 Mar 2015 00:00:00 +0100</pubDate>
      <guid>http://qone.io/temptation/2015/03/04/control-temptation-at-work.html</guid>
      <content:encoded><![CDATA[<p>So what do i mean with <code>control temptation @ work</code>. When working with development you have to get it to a problem and try to solve it. Doing that requires that you can stay focused on the task in hand to get the most out of it. Lets say you take 10 - 15 min to get it to the right flow. During your day you have email, facebook, online newspapers, chat systems like <code>IRC</code>, <code>HipChat</code>, <code>Skype</code>, colleagues and many others things that can make you get out of your productive flow. The result of this will mean for every time you lose the 10 - 15 min to get in to the productive flow, over and over. And you may end up at the end of that day and realizing that you did not get done with what you wanted. That is not fun for anyone.</p>

<p>What i have done to solve this for me! Is to have most notifications on my ´iPhone´ off like facebook, mail and other applications that may have possible notifications during the day. On my work laptop i have turned off mail notifications since i dont need to check every mail that pops up in the notifications window right away. I have delibretly not signed in and saved my login to facebook and other sites since i will have a hurdle to have to signs in. That will make me think do i really need to check this now NO. You may think what about the colleagues and all the conversations and noise that you have around you. A pair of <code>Bose quietcomfort 15</code> noise canceling headphones will help and take away most of the surounding noise that you may what to get away from to keep focus on the task in hand.</p>

<p>lets end with a good picture that shows that problem well. 
<img src="/imgs/ProgrammerInterrupted.png" alt="Alt text" /></p>

]]></content:encoded>
      <dc:date>2015-03-04T00:00:00+01:00</dc:date>
    </item>
    <dc:date>2016-08-21T00:00:00+02:00</dc:date>
  </channel>
</rss>