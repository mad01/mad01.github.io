<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>qone.io</title>
    <link>http://qone.io</link>
    <description>the dev blog</description>
    <pubDate>Fri, 24 Apr 2015 00:00:00 +0200</pubDate>
    <item>
      <title>docker compose with selenium</title>
      <link>http://qone.io/docker/selenium/2015/04/24/docker-compose-selenium-hub.html</link>
      <description><![CDATA[Running a local setup with selenium hub with Firefox and Google Chrome nodes using docker-compose .  Using docker-compose makes the setup even more convenient the using the docker --link commands. Starting and stoping the setup is just easy. Scaling up and down the number of Chrome and Firefox nodes is just a command to.
]]></description>
      <pubDate>Fri, 24 Apr 2015 00:00:00 +0200</pubDate>
      <guid>http://qone.io/docker/selenium/2015/04/24/docker-compose-selenium-hub.html</guid>
      <content:encoded><![CDATA[<p>Running a local setup with selenium hub with <code>Firefox</code> and <code>Google Chrome</code> nodes using <a href="https://github.com/docker/compose">docker-compose</a> .  Using <code>docker-compose</code> makes the setup even more convenient the using the <code>docker --link</code> commands. Starting and stoping the setup is just easy. Scaling up and down the number of Chrome and Firefox nodes is just a command to.</p>

<p><code>docker-compose</code> builds a setup based on a compose file that is a yaml file. Creating the setup file for a selenium hub with two nodes can look like this.</p>

<p>Selenium hub, the web ui is exposed on port 4444 on the docker server. If you are using a local setup in <code>OS X</code> you can get the ip with <code>boot2docker ip | pbcopy</code> . </p>

<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">hub</span><span class="p-Indicator">:</span>
<span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">selenium/hub</span>
<span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
<span class="p-Indicator">-</span> <span class="s">&quot;4444:4444&quot;</span></code></pre></div>

<p>Firefox selenium node head less</p>

<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">firefox</span><span class="p-Indicator">:</span>
<span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">selenium/node-firefox</span>
<span class="l-Scalar-Plain">links</span><span class="p-Indicator">:</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hub</span>
<span class="l-Scalar-Plain">expose</span><span class="p-Indicator">:</span>
<span class="p-Indicator">-</span> <span class="s">&quot;5555&quot;</span></code></pre></div>

<p>Google Chrome selenium node head less</p>

<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">chrome</span><span class="p-Indicator">:</span>
<span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">selenium/node-chrome</span>
<span class="l-Scalar-Plain">links</span><span class="p-Indicator">:</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hub</span>
<span class="l-Scalar-Plain">expose</span><span class="p-Indicator">:</span>
<span class="p-Indicator">-</span> <span class="s">&quot;5555&quot;</span></code></pre></div>

<p>to run the setup save it to a file named <code>docker-compose.yml</code> . Stand in the same folder as the compose file. run the following command to start the setup and send it to the background. If you like to run it in foreground remove the <code>-d</code> flag. If you donâ€™t have the images <code>docker-compose</code> will pull the images like normal with docker</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">jone@doe:~<span class="nv">$ </span>docker-compose up -d
Recreating selenium_hub_1...
Recreating selenium_firefox_1...
Recreating selenium_chrome_1...</code></pre></div>

<p>Now lets look and see if the docker images are running</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">jone@doe:~<span class="nv">$ </span> docker-compose ps
Name Command State Ports
----------------------------------------------------------
selenium_chrome_1 /opt/bin/entry_point.sh Up 5555/tcp
selenium_firefox_1 /opt/bin/entry_point.sh Up 5555/tcp
selenium_hub_1 /opt/bin/entry_point.sh Up 0.0.0.0:4444-&gt;4444/tcp</code></pre></div>

<p>Lest assume that you like to scale the number of Firefox and Chrome nodes to two of each. You can use the <code>scale</code> command with <code>docker-compose</code> . The name of the nodes are used to scale up and down the number of docker instances that are running. </p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">jone@doe:~<span class="nv">$ </span>docker-compose scale <span class="nv">firefox</span><span class="o">=</span><span class="m">2</span> <span class="nv">chrome</span><span class="o">=</span>2
Creating selenium_firefox_2...
Starting selenium_firefox_2...
Creating selenium_chrome_2...
Starting selenium_chrome_2...</code></pre></div>

<p>Now lets stop the setup. using the <code>stop</code> command with <code>docker-compose</code></p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">jone@doe:~<span class="nv">$ </span>docker-compose stop
Stopping selenium_chrome_2...
Stopping selenium_chrome_1...
Stopping selenium_firefox_2...
Stopping selenium_firefox_1...
Stopping selenium_hub_1...</code></pre></div>

<p>link to docker-compose file <a href="https://github.com/mad01/boilerplates/blob/master/docker/compose/selenium/docker-compose.yml">source</a></p>
]]></content:encoded>
      <dc:date>2015-04-24T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>a theory of productivity</title>
      <link>http://qone.io/productivity/2015/04/18/theory-of-productivity.html</link>
      <description><![CDATA[How to think about productivity. Lest take a example a math test. The test contains 20 problems, the total assumed time with no interruption to finish the test with all correct answers is 60 minutes. That is all god. Now lest assume that we mix in interruption in to the factor. At 5 times at random times you will get interrupted. The interruption will be to answer a random question, that will take 1-2 min to answer. You are then to return to the test. If we now assume that the interruption will be done so that you get interrupted when you are close to a answer. This interruption will result in 3 of 5 tests that you got interrupted no will be incorrect. For every interruption you also had to restart the current question you were on since you forgot the answer you almost had. 
]]></description>
      <pubDate>Sat, 18 Apr 2015 00:00:00 +0200</pubDate>
      <guid>http://qone.io/productivity/2015/04/18/theory-of-productivity.html</guid>
      <content:encoded><![CDATA[<p>How to think about productivity. Lest take a example a math test. The test contains 20 problems, the total assumed time with no interruption to finish the test with all correct answers is 60 minutes. That is all god. Now lest assume that we mix in interruption in to the factor. At 5 times at random times you will get interrupted. The interruption will be to answer a random question, that will take 1-2 min to answer. You are then to return to the test. If we now assume that the interruption will be done so that you get interrupted when you are close to a answer. This interruption will result in 3 of 5 tests that you got interrupted no will be incorrect. For every interruption you also had to restart the current question you were on since you forgot the answer you almost had. </p>

<ul>
<li>time per test no interruptions (60 min / 20 tests) = 3 min / test</li>
<li>time per test when interuppted (60 min / 20 tests) + ( 5 interruptions * 3 min) = 3.75 min / test. And 3 of 20 tests were incorrect. </li>
</ul>

<p>Conclusion here if you think of productivity like this it will be clear that the result of a uninterrupted person will be better then the interrupted one. So next time you send a email to a college go over and ask did you se my email. think again and leat the guy/girl get to it when they have time. In the majority of all cases that you like a answer to a email you do not really need it at this instance. </p>

<p>If you also think of the interruption as a notification on your phone/laptop you louse focus and look on Facebook, twitter read some news. that is more close to the normal work day. And the math test is a new feature or a bug that you are trying to fix. </p>
]]></content:encoded>
      <dc:date>2015-04-18T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>html email with aws ses and boto</title>
      <link>http://qone.io/amazon/aws/ses/python/boto/2015/04/11/aws-ses-python-boto.html</link>
      <description><![CDATA[Sending html email with amazon ses simple email service using the python module boto. 
]]></description>
      <pubDate>Sat, 11 Apr 2015 00:00:00 +0200</pubDate>
      <guid>http://qone.io/amazon/aws/ses/python/boto/2015/04/11/aws-ses-python-boto.html</guid>
      <content:encoded><![CDATA[<p>Sending html email with amazon ses <code>simple email service</code> using the python module <a href="https://github.com/boto/boto">boto</a>. </p>

<p>to be able to start using the <code>ses</code> service you need to verify two emails. The first you what is the address that you like to use to send from. The second is the one you like to receive it in. To be able to verify that addresses you need a valid address since a validation email will be sent to the address. after that is done, you can start yo use the mail addresses. At this stage you will only have a sandbox version of <code>ses</code>, you will only be able to send/receive from the verified addressed. at a later state you can request production that will open to send email to any one. When in the sandbox state of <code>ses</code> you will only have a limit of 200 emails every 24h. </p>

<p>the input variables that will be need to send a html email, is a html file, a subject, a address that you send from, a list of addresses to send to. at this state only the list of the verified addresses will work, and last the aws region.  </p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">ses_send_html_mail</span><span class="p">(</span>
    <span class="n">htmlFile</span><span class="o">=</span><span class="s">&quot;foobar.html&quot;</span><span class="p">,</span>
    <span class="n">subject</span><span class="o">=</span><span class="s">&quot;example&quot;</span><span class="p">,</span>
    <span class="n">send_from</span><span class="o">=</span><span class="s">&quot;from@example.com&quot;</span><span class="p">,</span>
    <span class="n">send_to</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;to@example.com&quot;</span><span class="p">],</span>
    <span class="n">aws_region</span><span class="o">=</span><span class="s">&quot;us-west-2&quot;</span><span class="p">):</span></code></pre></div>

<p>Now lets assing the needed variables to the <code>MIMEMultipart</code>, subject, to and from. </p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">message</span> <span class="o">=</span> <span class="n">MIMEMultipart</span><span class="p">()</span>
    <span class="n">message</span><span class="p">[</span><span class="s">&quot;Subject&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">subject</span>
    <span class="n">message</span><span class="p">[</span><span class="s">&quot;From&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">send_from</span>
    <span class="n">message</span><span class="p">[</span><span class="s">&quot;To&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">send_to</span></code></pre></div>

<p>The html file needs to be passed as a string and to do that we can open that file with .read() . The MIMEText takes a string as the first input variable, add a optional second string that identifies the type of the first string, here you set html. There is a list of <a href="http://docs.aws.amazon.com/ses/latest/DeveloperGuide/mime-types.html">unsupported attachment types</a> that can&#39;t be used everything else is supported. </p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">html</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">htmlFile</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
    <span class="n">attachment</span> <span class="o">=</span> <span class="n">MIMEText</span><span class="p">(</span><span class="n">html</span><span class="p">,</span> <span class="s">&#39;html&#39;</span><span class="p">)</span>
    <span class="n">message</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">attachment</span><span class="p">)</span></code></pre></div>

<p>Now the last step to connect to amazon aws <code>ses</code> and send the email.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">aws_connect</span> <span class="o">=</span> <span class="n">boto</span><span class="o">.</span><span class="n">ses</span><span class="o">.</span><span class="n">connect_to_region</span><span class="p">(</span><span class="n">aws_region</span><span class="p">)</span>
    <span class="n">send_mail</span> <span class="o">=</span> <span class="n">aws_connect</span><span class="o">.</span><span class="n">send_raw_email</span><span class="p">(</span>
        <span class="n">message</span><span class="o">.</span><span class="n">string</span><span class="p">(),</span>
        <span class="n">source</span><span class="o">=</span><span class="n">message</span><span class="p">[</span><span class="s">&#39;From&#39;</span><span class="p">],</span>
        <span class="n">destinations</span><span class="o">=</span><span class="n">message</span><span class="p">[</span><span class="s">&#39;To&#39;</span><span class="p">]</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">send_mail</span></code></pre></div>

<p>source to example <a href="https://github.com/mad01/boilerplates/blob/master/python/aws.py">link</a></p>
]]></content:encoded>
      <dc:date>2015-04-11T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>bulding a debian docker base build for a flask app</title>
      <link>http://qone.io/docker/debian/2015/04/03/docker_basic_build.html</link>
      <description><![CDATA[Start by pulling down a debian base build. docker pull debian:8.0 .Creating a Dockerfile for a base build to a python flask app. based on debian 8
]]></description>
      <pubDate>Fri, 03 Apr 2015 00:00:00 +0200</pubDate>
      <guid>http://qone.io/docker/debian/2015/04/03/docker_basic_build.html</guid>
      <content:encoded><![CDATA[<p>Start by pulling down a debian base build. <code>docker pull debian:8.0</code> .Creating a <code>Dockerfile</code> for a base build to a python flask app. based on debian 8</p>

<div class="highlight"><pre><code class="language-docker" data-lang="docker"><span class="k">FROM</span> debian:8.0

<span class="k">RUN</span> apt-get -y update <span class="err">\</span>
    <span class="o">&amp;&amp;</span> apt-get upgrade -y <span class="err">\</span>
    <span class="o">&amp;&amp;</span> apt-get install -y <span class="err">\</span>
        python-setuptools <span class="err">\</span>
        python-pip

<span class="k">RUN</span> pip install flask <span class="err">\</span>
                flask-restful <span class="err">\</span>
                pymongo</code></pre></div>

<p>build the docker base image. the <code>-t</code> gives the build a name, the <code>--rm=true</code> means &quot;Remove intermediate containers after a successful build&quot;, the <code>--no-cache=false</code> means &quot;Do not use cache when building the image&quot;. the dot means look for the <code>Dockerfile</code> in the current folder. using the flags together means that all of the steps in the docker build is done every time since i want to make the full docker build. Not just from a commit a few steps in to the build. </p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">docker build -t foobar --rm<span class="o">=</span><span class="nb">true</span> --no-cache<span class="o">=</span><span class="nb">false</span> .</code></pre></div>

<p>build the flask app docker image based on the base docker build foobar. </p>

<div class="highlight"><pre><code class="language-docker" data-lang="docker"><span class="k">FROM</span> foobar

<span class="k">RUN</span> mkdir -p /opt/app
COPY app* /opt/app

<span class="k">WORKDIR</span> /opt/app/
<span class="k">ENTRYPOINT</span> <span class="o">[</span><span class="s2">&quot;python&quot;</span>, <span class="s2">&quot;api.py&quot;</span><span class="o">]</span></code></pre></div>

<p>building the api docker image. the assumption is that there is a folder named app in the same folder as the <code>Dockerfile</code>. This folder contains the api and the support modules and files needed for the api. &#39;COPY app* /opt/app&#39; will copy all files in the app folder and copy them to the /opt/app folder in the docker image. using the <code>WORKDIR</code> and <code>ENTRYPOINT</code> makes the docker image start the api on start of the image. </p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">docker build -t api --rm<span class="o">=</span><span class="nb">true</span> --no-cache<span class="o">=</span><span class="nb">false</span> .</code></pre></div>

<p>Now you can start the docker image named api and the api will be started when the docker image is started. </p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">docker run -i api</code></pre></div>
 
]]></content:encoded>
      <dc:date>2015-04-03T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>python flask rest api auth option storing in mongoDB 3.0 running on docker</title>
      <link>http://qone.io/python/rest/docker/mongodb/2015/03/28/python-flask-mongoDB-restApi-auth.html</link>
      <description><![CDATA[I have been looking on a way to auth rest api endpoints that needs to have auth. I will be using Python with flask, flask-restful, yaml, pymongo and passlib. passlib will be used to salt the password that will be stored in mondoDB. A note here is that i will be using mongoDB 3.0 which means that you have to install the un released pymongo 3.0. here is the packets and links you need. 
]]></description>
      <pubDate>Sat, 28 Mar 2015 00:00:00 +0100</pubDate>
      <guid>http://qone.io/python/rest/docker/mongodb/2015/03/28/python-flask-mongoDB-restApi-auth.html</guid>
      <content:encoded><![CDATA[<p>I have been looking on a way to auth rest api endpoints that needs to have auth. I will be using Python with flask, flask-restful, yaml, pymongo and passlib. passlib will be used to salt the password that will be stored in mondoDB. A note here is that i will be using mongoDB 3.0 which means that you have to install the un released pymongo 3.0. here is the packets and links you need. </p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">pip install https://github.com/mongodb/mongo-python-driver/archive/3.0b1.tar.gz
pip install PyYaml
pip install flask-restful
pip install flask
pip install passlib</code></pre></div>

<p>i am installing MongoDB 3.0 using docker. And starting the db. i should end up with one running mondoDB 3.0 named <code>mongo</code>. i can check that with <code>docker ps</code></p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">docker pull mongo
docker run --name mongo -d -p 27017:27017 mongo:3.0</code></pre></div>

<p>Starting with the mongo module to add a user to a collection in mongo. The <code>createOrUpdateUser</code> function creates a checks if the user exists in mongo. If that is the case it will update it and add a new time to the updates so i have stored the created date and last update with a timestamp. If the user is not in the db collection one will be created. This function will return the ObjectId of the user that later will be used to get the user. </p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">createOrUpdateUser</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">saltedKey</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">database</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">):</span>
    <span class="n">client</span> <span class="o">=</span> <span class="n">MongoClient</span><span class="p">(</span><span class="n">host</span><span class="p">)</span>
    <span class="n">db</span> <span class="o">=</span> <span class="n">client</span><span class="p">[</span><span class="n">database</span><span class="p">]</span>
    <span class="n">checkUser</span> <span class="o">=</span> <span class="p">[</span><span class="n">doc</span> <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">db</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">find</span><span class="p">({</span><span class="s">&quot;username&quot;</span><span class="p">:</span> <span class="n">username</span><span class="p">})]</span>
    <span class="k">if</span> <span class="n">checkUser</span><span class="p">:</span>
        <span class="n">userData</span> <span class="o">=</span> <span class="n">checkUser</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">db</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">replace_one</span><span class="p">(</span>
            <span class="p">{</span>
                <span class="s">&quot;username&quot;</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span>
                <span class="s">&quot;saltedKey&quot;</span><span class="p">:</span> <span class="n">userData</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;saltedKey&#39;</span><span class="p">),</span>
            <span class="p">},</span> <span class="p">{</span>
                <span class="s">&quot;username&quot;</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span>
                <span class="s">&quot;saltedKey&quot;</span><span class="p">:</span> <span class="n">saltedKey</span><span class="p">,</span>
                <span class="s">&quot;created&quot;</span><span class="p">:</span> <span class="n">userData</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;created&#39;</span><span class="p">),</span>
                <span class="s">&quot;updated&quot;</span><span class="p">:</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">utcnow</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">)</span>
        <span class="n">userObjectId</span> <span class="o">=</span> <span class="p">[</span><span class="n">doc</span> <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">db</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">find</span><span class="p">({</span><span class="s">&quot;username&quot;</span><span class="p">:</span> <span class="n">username</span><span class="p">})][</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;_id&#39;</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">userObjectId</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">&quot;saltedKey&quot;</span><span class="p">:</span> <span class="n">saltedKey</span><span class="p">,</span>
            <span class="s">&quot;created&quot;</span><span class="p">:</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">utcnow</span><span class="p">(),</span>
            <span class="s">&quot;updated&quot;</span><span class="p">:</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">utcnow</span><span class="p">(),</span>
            <span class="s">&quot;username&quot;</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span>
        <span class="p">}</span>
        <span class="n">userObjectId</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">insert_one</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">.</span><span class="n">inserted_id</span>
        <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">userObjectId</span><span class="p">)</span></code></pre></div>

<p>Next is the <code>getUser</code> from mongo using the ObjectId. it will return the full json document stored in mongo.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">getUser</span><span class="p">(</span><span class="n">userObjectId</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">database</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;get user json ducument from mongo&quot;&quot;&quot;</span>
    <span class="n">client</span> <span class="o">=</span> <span class="n">MongoClient</span><span class="p">(</span><span class="n">host</span><span class="p">)</span>
    <span class="n">db</span> <span class="o">=</span> <span class="n">client</span><span class="p">[</span><span class="n">database</span><span class="p">]</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">doc</span> <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">db</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">find</span><span class="p">({</span><span class="s">&quot;_id&quot;</span><span class="p">:</span> <span class="n">ObjectId</span><span class="p">(</span><span class="n">userObjectId</span><span class="p">)})][</span><span class="mi">0</span><span class="p">]</span></code></pre></div>

<p>To create the use and salt the password i am using <code>passlib</code> i&#39;m giving a username, a password, and the mongo host, I&#39;m then using the <code>createOrUpdateUser</code> to add the user in to a collection called endpoints. the function returns a dict that contains the ObjectId if the new of updated user.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">addUser</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">mongo</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">):</span>
    <span class="n">passwordSalted</span> <span class="o">=</span> <span class="n">apps</span><span class="o">.</span><span class="n">custom_app_context</span><span class="o">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
    <span class="n">userObjectId</span> <span class="o">=</span> <span class="n">createOrUpdateUser</span><span class="p">(</span>
        <span class="n">username</span><span class="p">,</span>
        <span class="n">saltedKey</span><span class="o">=</span><span class="n">passwordSalted</span><span class="p">,</span>
        <span class="n">host</span><span class="o">=</span><span class="n">mongo</span><span class="p">,</span>
        <span class="n">database</span><span class="o">=</span><span class="s">&#39;endpoints&#39;</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="p">{</span><span class="s">&quot;userObjectId&quot;</span><span class="p">:</span> <span class="n">userObjectId</span><span class="p">}</span></code></pre></div>

<p>To validate that the password is current I&#39;m using <code>getUser</code> to get the salted password from mongo in the collection endpoints where i stored that user data. the function is then using a validation option of the salt function that takes the salted password and the password to check if it&#39;s correct.  if the verification passes a boolean True is returned else you get a False. </p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">validateUserKey</span><span class="p">(</span><span class="n">userObjectId</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">mongo</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">):</span>
    <span class="n">salt</span> <span class="o">=</span> <span class="n">getUser</span><span class="p">(</span>
        <span class="n">userObjectId</span><span class="p">,</span>
        <span class="n">host</span><span class="o">=</span><span class="n">mongo</span><span class="p">,</span>
        <span class="n">database</span><span class="o">=</span><span class="s">&quot;endpoints&quot;</span>
    <span class="p">)</span>
    <span class="n">valid</span> <span class="o">=</span> <span class="n">apps</span><span class="o">.</span><span class="n">custom_app_context</span><span class="o">.</span><span class="n">verify</span><span class="p">(</span>
        <span class="n">password</span><span class="p">,</span>
        <span class="n">salt</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;saltedKey&#39;</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">valid</span></code></pre></div>

<p>Lest look on the REST api. I am using the <a href="http://flask.pocoo.org/">flask</a> and <a href="https://flask-restful.readthedocs.org/en/0.3.2/">flask restful</a> packets to create the REST api. The <code>protected</code> class <strong>init</strong> have two keys <code>oid</code> and <code>key</code> that should be in the http payload. in the get function i am using &quot;self.reqparse.parse<em>args(strict=True)&quot; that means that the oid and key key/value have to be in the get payload or the request will be rejected. i am then checking that the key for the oid is valid using <code>validateCheck</code> if it&#39;s valid you get the {&quot;key&quot;: &quot;valid&quot;} else you get http 401. i am then adding that class to the &quot;api.add</em>resource(protected, &#39;/api/protected&#39;)&quot; which adds a REST endpoint <code>/api/protected</code>valid</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">protected</span><span class="p">(</span><span class="n">Resource</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">reqparse</span> <span class="o">=</span> <span class="n">reqparse</span><span class="o">.</span><span class="n">RequestParser</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">reqparse</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">&#39;oid&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">reqparse</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">&#39;key&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">mongo</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;mongoDB&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;host&#39;</span><span class="p">)</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">protected</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">args</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">reqparse</span><span class="o">.</span><span class="n">parse_args</span><span class="p">(</span><span class="n">strict</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">validateCheck</span> <span class="o">=</span> <span class="n">salt</span><span class="o">.</span><span class="n">validateUserKey</span><span class="p">(</span>
            <span class="n">userObjectId</span><span class="o">=</span><span class="n">args</span><span class="o">.</span><span class="n">oid</span><span class="p">,</span>
            <span class="n">password</span><span class="o">=</span><span class="n">args</span><span class="o">.</span><span class="n">key</span><span class="p">,</span>
            <span class="n">mongo</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">mongo</span>
        <span class="p">)</span>
        <span class="k">if</span> <span class="n">validateCheck</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="s">&quot;key&quot;</span><span class="p">:</span> <span class="s">&quot;valid&quot;</span><span class="p">}</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">abort</span><span class="p">(</span><span class="mi">401</span><span class="p">)</span>

<span class="n">api</span><span class="o">.</span><span class="n">add_resource</span><span class="p">(</span><span class="n">protected</span><span class="p">,</span> <span class="s">&#39;/api/protected&#39;</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span></code></pre></div>

<p>Looking on a test for this to checks that a user is valid if the correct key/oid is passed and then if the wrong key/right oid is passed it can look like this. The assumption here is that the REST api is started and running on localhost and that the docker mongo:3.0 is running on 192.168.59.103. In the <code>setUpClass</code> i am declaring all variables to self that will be used in test. i am running the tests with <a href="https://nose.readthedocs.org/en/latest/">nosetests</a>. The first test <code>testAccessValidKey</code> passed the correct key/oid and should get back http 200. the second test should fail the validation, it passes a invalid key and a valid oid, the api should return http 401.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">checkAccess</span><span class="p">(</span><span class="n">oid</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;oid&quot;</span><span class="p">:</span> <span class="n">oid</span><span class="p">,</span> <span class="s">&quot;key&quot;</span><span class="p">:</span> <span class="n">password</span><span class="p">}</span>
    <span class="k">return</span> <span class="n">get</span><span class="p">(</span><span class="s">&#39;http://&#39;</span> <span class="o">+</span> <span class="n">host</span> <span class="o">+</span> <span class="s">&#39;:5000/api/protected&#39;</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">TestRestGetCalls</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>

    <span class="nd">@classmethod</span>       
    <span class="k">def</span> <span class="nf">setUpClass</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">confFile</span> <span class="o">=</span> <span class="nb">file</span><span class="p">(</span><span class="s">&#39;tests/test_salt.yaml&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span>
        <span class="n">conf</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">confFile</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">mongo</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;mongoDB&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;host&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">api</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;api&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;host&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="s">&quot;foo&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">user</span> <span class="o">=</span> <span class="s">&quot;bar&quot;</span>
        <span class="n">userDoc</span> <span class="o">=</span> <span class="n">salt</span><span class="o">.</span><span class="n">addUser</span><span class="p">(</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">user</span><span class="p">,</span>
            <span class="n">password</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">key</span><span class="p">,</span>
            <span class="n">mongo</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">mongo</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">oid</span> <span class="o">=</span> <span class="n">userDoc</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;userObjectId&quot;</span><span class="p">)</span>

    <span class="nd">@classmethod</span>       
    <span class="k">def</span> <span class="nf">tearDownClass</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">testAccessValidKey</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">httpGet</span> <span class="o">=</span> <span class="n">checkAccess</span><span class="p">(</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">oid</span><span class="p">,</span>
            <span class="n">password</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">key</span><span class="p">,</span>
            <span class="n">host</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">api</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="n">httpGet</span><span class="o">.</span><span class="n">status_code</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">testAccessInValidKey</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">httpGet</span> <span class="o">=</span> <span class="n">checkAccess</span><span class="p">(</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">oid</span><span class="p">,</span>
            <span class="n">password</span><span class="o">=</span><span class="s">&quot;foobar&quot;</span><span class="p">,</span>
            <span class="n">host</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">api</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="mi">401</span><span class="p">,</span> <span class="n">httpGet</span><span class="o">.</span><span class="n">status_code</span><span class="p">)</span></code></pre></div>

<p>the source for all the code can be found on my github here <a href="https://github.com/mad01/boilerplates/tree/master/python">Link</a></p>
]]></content:encoded>
      <dc:date>2015-03-28T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>productivity with Pomodoro and micro checklist</title>
      <link>http://qone.io/productivity/2015/03/25/productivity.html</link>
      <description><![CDATA[I have recently started to use a productivity theory called Pomodoro. The principe with Pomodoro is that you work focused on something for 25 min, having a micro break for 5 min and then continue. After 4 sessions you have a longer break for 15 min. I have been using this in combination with a micro checklist. What i mean with micro checklist is to have a check list like this. 
]]></description>
      <pubDate>Wed, 25 Mar 2015 00:00:00 +0100</pubDate>
      <guid>http://qone.io/productivity/2015/03/25/productivity.html</guid>
      <content:encoded><![CDATA[<p>I have recently started to use a productivity theory called <code>Pomodoro</code>. The principe with Pomodoro is that you work focused on something for 25 min, having a micro break for 5 min and then continue. After 4 sessions you have a longer break for 15 min. I have been using this in combination with a <code>micro checklist</code>. What i mean with <code>micro checklist</code> is to have a check list like this. </p>

<p><code>micro checklist</code> example</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[]</span> big task1
    <span class="o">[]</span> small task1
    <span class="o">[]</span> small task2
    <span class="o">[]</span> small task3</code></pre></div>

<p>By making a list of small task that should take less then 25 min the best is if you can fit a few in since you want to try to finish the task in the <code>Pomodoro</code> session. after each micro tank is done you can check it by adding a x inside <code>[X]</code>. The important thing here is to have the task strict enough to not have to think about what to do when you are in the <code>Pomodoro</code> session. When you are in the <code>Pomodoro</code> session you don&#39;t want do have to be interrupted since you will get out of your flow. </p>

<p>during the session you should not do anything then the task that you have defined. NO email, chat, news sites Nothing, that is what you can use your break for. You may ask how about you colleagues, and your manager, you have to explain what you are planing to do or are doing. It will not be that hard to get them onboard when they understand that this is something that you are doing to get more done and be as productive as possible. The most you will be unavailable is 25 min. </p>

<p>if you feel that the sessions are to short you can adjust to a bit to fit you better but then have a bit longer breaks after each session. For me having 25 min works well, that is what you should do if you want to follow `Pomodoro. If you can&#39;t get done with the micro task you should probably split the tasks in even smaller chunks</p>

<p>i am using a application <code>Pomodoro+</code> you can find it on the Apples Appstore. There is a free version and a payed one. i recommend getting the payed one since you will give back something to the developer. </p>
]]></content:encoded>
      <dc:date>2015-03-25T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>pitfalls when writing commandline tools</title>
      <link>http://qone.io/command/line/tools/2015/03/21/command-line-tools-pitfalls.html</link>
      <description><![CDATA[Common pitfalls when using template files/support files in the working dir of the script, is easy to miss when you are writing command line tools. In this case using python. Some of the more annoying mistakes is when you have template files stores and referred to in a script, you assume that the person that will use you script stands in the folder were the script is. lest assume that we are using a file template.html in a folder named foobar. of corse this will not work if you are running the script from somewhere else. I normally stand in the same folder as the script when i am developing a tool. When you then stand in some other folder everything will fail since you are not giving the absolute path to the template files. 
]]></description>
      <pubDate>Sat, 21 Mar 2015 00:00:00 +0100</pubDate>
      <guid>http://qone.io/command/line/tools/2015/03/21/command-line-tools-pitfalls.html</guid>
      <content:encoded><![CDATA[<p>Common pitfalls when using template files/support files in the working dir of the script, is easy to miss when you are writing command line tools. In this case using <code>python</code>. Some of the more annoying mistakes is when you have template files stores and referred to in a script, you assume that the person that will use you script stands in the folder were the script is. lest assume that we are using a file template.html in a folder named foobar. of corse this will not work if you are running the script from somewhere else. I normally stand in the same folder as the script when i am developing a tool. When you then stand in some other folder everything will fail since you are not giving the absolute path to the template files. </p>

<p>there is a few option here and it&#39;s to either only work if you standing in the correct folder, fix the paths to work anyway, or last a install script that creates the env you need and have a static path that can be used in any system.</p>

<p>you have a few options here were to store scripts and template/files that you need to read in linux. </p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">/usr/local/sbin <span class="c"># custom script for root</span>
/usr/local/bin  <span class="c"># custom script for all users</span>
/usr/local/share <span class="c"># store support files like templates for scripts recommended to use a subfolder</span>
/usr/share <span class="c"># store support files like templates for scripts recommended to use a subfolder</span></code></pre></div>

<p>i will assume that you want a custom script with a support template file. the script should be for all users. that means the script should be stored in <code>/usr/local/bin</code> and i will store the support template in a subfolder in <code>/usr/share</code>. this is how i can look to accomplish that. first i remove the old files and then write the new version.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/bash</span>
sudo rm -rf /usr/local/bin/foo.py /usr/local/bin/bar.py
sudo rm -rf /usr/share/foobar

sudo mkdir /usr/share/foobar
sudo cp -r template /usr/share/foobar
sudo cp foo.py bar.py /usr/local/bin</code></pre></div>

<p>one other option is if you don&#39;t want to install the script but still like to call the script from anywhere and still have template files working. you can use <code>os.path.dirname(os.path.abspath(__name__))</code> in the python script to give the working dir of the script, and then using that to add to the path of template files. this is how it can look </p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">scriptDir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">__name__</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">readFile</span><span class="p">(</span><span class="n">inFile</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;read file in subfolder of working dir of script&quot;&quot;&quot;</span>
    <span class="n">inFile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">scriptDir</span> <span class="o">+</span> <span class="s">&#39;/foobar/template.html&#39;</span><span class="p">,</span>
        <span class="s">&#39;r&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">inFile</span>

<span class="k">def</span> <span class="nf">writeFile</span><span class="p">(</span><span class="n">outFile</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;write file in working dir of script&quot;&quot;&quot;</span>
    <span class="n">writeFile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">scriptDir</span> <span class="o">+</span> <span class="s">&#39;/&#39;</span> <span class="o">+</span> <span class="n">outFile</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">lines</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
        <span class="n">writeFile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>

    <span class="n">writeFile</span><span class="o">.</span><span class="n">close</span><span class="p">()</span></code></pre></div>
]]></content:encoded>
      <dc:date>2015-03-21T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>dynamic test generation</title>
      <link>http://qone.io/testing/python/2015/03/15/test-generation.html</link>
      <description><![CDATA[I what to show a api template i did to generate api post tests with a random varible lenght hex value as the payload in a http post request. In this case i am using python, in compination with nose, to run my tests. Note you can run this without nose but you will get all prints from the support libs. Nose will supress the prints if the test passes. To change to varible number of tests that you can generate you just change the random_data input integer. The purpose of this is to be able to check that a REST api can take the random input length of the hex payload. in the testmap you gets a dict that contains a random, int, float, hex, password. 
]]></description>
      <pubDate>Sun, 15 Mar 2015 00:00:00 +0100</pubDate>
      <guid>http://qone.io/testing/python/2015/03/15/test-generation.html</guid>
      <content:encoded><![CDATA[<p>I what to show a api template i did to generate api post tests with a random varible lenght hex value as the payload in a http post request. In this case i am using python, in compination with <a href="https://nose.readthedocs.org">nose</a>, to run my tests. Note you can run this without nose but you will get all prints from the support libs. Nose will supress the prints if the test passes. To change to varible number of tests that you can generate you just change the <code>random_data</code> input integer. The purpose of this is to be able to check that a REST api can take the random input length of the hex payload. in the testmap you gets a dict that contains a random, int, float, hex, password. </p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">TestGenClass</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">def</span> <span class="nf">dynamic_gen</span><span class="p">(</span><span class="n">test_assert</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">dynamic_test_method</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">shared</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">&quot;api&quot;</span><span class="p">:</span> <span class="s">&quot;post&quot;</span><span class="p">,</span>
            <span class="s">&quot;host&quot;</span><span class="p">:</span> <span class="s">&quot;httpbin.org&quot;</span>
        <span class="p">}</span>
        <span class="n">result_code</span><span class="p">,</span> <span class="n">http_data</span> <span class="o">=</span> <span class="n">http_post</span><span class="p">(</span>
            <span class="n">shared</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;host&#39;</span><span class="p">),</span>
            <span class="n">api</span><span class="o">=</span><span class="n">shared</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;api&#39;</span><span class="p">),</span>
            <span class="n">payload</span><span class="o">=</span><span class="p">{</span><span class="s">&quot;hex&quot;</span><span class="p">:</span> <span class="n">test_assert</span><span class="p">}</span>
        <span class="p">)</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">http_data</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">result_code</span><span class="p">),</span> <span class="mi">200</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span>
            <span class="nb">unicode</span><span class="p">(</span><span class="n">test_assert</span><span class="p">),</span>
            <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;data&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;hex&#39;</span><span class="p">)</span>
        <span class="p">)</span>

    <span class="k">return</span> <span class="n">dynamic_test_method</span>

<span class="n">testmap</span> <span class="o">=</span> <span class="n">random_data</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">parms</span> <span class="ow">in</span> <span class="n">testmap</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">dynamic_gen</span><span class="p">(</span><span class="n">parms</span><span class="p">[</span><span class="s">&quot;hex&quot;</span><span class="p">])</span>
    <span class="n">data</span><span class="o">.</span><span class="n">__name__</span> <span class="o">=</span> <span class="s">&quot;test_{0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
    <span class="n">data</span><span class="o">.</span><span class="n">__doc__</span> <span class="o">=</span> <span class="s">&quot;test_{0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
    <span class="nb">setattr</span><span class="p">(</span><span class="n">TestGenClass</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="n">__name__</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
    <span class="k">del</span> <span class="n">data</span></code></pre></div>

<p>link to <a href="https://github.com/mad01/boilerplates/blob/master/python/test_api_post.py">source</a>.</p>
]]></content:encoded>
      <dc:date>2015-03-15T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>stay up to date with tech</title>
      <link>http://qone.io/tech/news/2015/03/09/stay-up-tp-date-with-tech.html</link>
      <description><![CDATA[Keeping up with tech. I like read and be aware of what is going on in tech, security, apple, linux, development, testing, and some devops related topics. I have attached a OPML file from my feedly where i get most of my news if your interested. I am frequently listening to a few podcasts, I&#39;m using a awesome podcast iPhone` app overcast to litsen. The smart speed saves some time, voice boost helps to boost the voice those is the features i think it best for me. 
]]></description>
      <pubDate>Mon, 09 Mar 2015 00:00:00 +0100</pubDate>
      <guid>http://qone.io/tech/news/2015/03/09/stay-up-tp-date-with-tech.html</guid>
      <content:encoded><![CDATA[<p>Keeping up with tech. I like read and be aware of what is going on in tech, security, apple, linux, development, testing, and some devops related topics. I have attached a <code>OPML</code> file from my <a href="https://feedly.com">feedly</a> where i get most of my news if your interested. I am frequently listening to a few podcasts, I&#39;m using a awesome podcast iPhone` app <a href="https://overcast.fm/">overcast</a> to litsen. The smart speed saves some time, voice boost helps to boost the voice those is the features i think it best for me. </p>

<p>One of the more important areas for me is the security blogs and news one medium is the podcast <a href="https://www.grc.com/securitynow.htm">Security Now</a>. The reason for this is to be aware and understand security vulnerabilities, what you can do to patch and protect you and your systems, from the new and bad vulnerabilities that gets public mainly when related to linux and open source since that is what i am using.</p>

<p>Also keeping up with testing blogs and development blogs is important to get useful information about new things and new cool ways to do development and testing.  </p>

<p>One more thing it&#39;s a service called <a href="http://www.meetup.com">Meetup</a>, It&#39;s a service that offers you the option to connect with local user groups. In my case it&#39;s to get in contact with interesting pepole network and the most important share knowledge. Many of the tech/development related groups have a lot of interesting events with speakers that share about technologies they use. </p>

<p>Podcasts</p>

<ul>
<li><a href="http://www.relay.fm/clockwise">Clockwise</a></li>
<li><a href="https://www.grc.com/securitynow.htm">Security Now</a></li>
<li><a href="http://atp.fm/">Accidental Tech Podcast</a></li>
<li><a href="https://www.developertea.com/">Developer Tea</a></li>
<li><a href="http://twit.tv/show/this-week-in-tech">This Week in Tech</a></li>
<li><a href="http://elementopie.com/everyday-linux-episodes">Everyday Linux</a></li>
<li><a href="http://kodsnack.se/">Kodsnack</a></li>
<li><a href="http://www.macpowerusers.com/">Mac Power Users</a></li>
<li><a href="http://twit.tv/show/macbreak-weekly">MacBreak Weekly</a></li>
<li><a href="http://twit.tv/">This Week in Enterprice Tech</a></li>
<li><a href="http://twit.tv/show/triangulation">Triangulation</a></li>
</ul>

<p>rss</p>

<ul>
<li><a href="/share/feedly.opml">opml file</a></li>
</ul>
]]></content:encoded>
      <dc:date>2015-03-09T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>cold brew coffee</title>
      <link>http://qone.io/coffee/coldbrew/2015/03/08/cold-brew-coffee.html</link>
      <description><![CDATA[Brew some easy and good cold brew coffee. This can be used for just plain ice coffee, ice latte, and many more. A note it that it will be high in caffeine. What you need is. 
]]></description>
      <pubDate>Sun, 08 Mar 2015 00:00:00 +0100</pubDate>
      <guid>http://qone.io/coffee/coldbrew/2015/03/08/cold-brew-coffee.html</guid>
      <content:encoded><![CDATA[<p>Brew some easy and good cold brew coffee. This can be used for just plain ice coffee, ice latte, and many more. A note it that it will be high in caffeine. What you need is. </p>

<ul>
<li>a one liter jar</li>
<li>coffee beans <code>newly roasted preferred</code></li>
<li>water <code>filtered preferred</code></li>
<li>a french press</li>
</ul>

<p>My favourite coffee roastery is called <a href="http://www.dropcoffee.com/">dropcoffee</a>. it&#39;s a small roastery in Stockholm. They always have something interesting to offer and always has some new coffee roast to try. Most of the roasts is lighter roasts look them up here is you like to try. <a href="http://www.dropcoffee.com/">dropcoffee</a></p>

<p>Start by milling coffee. you what medium size grounds. Put the grounds in the jar, you what to have the jar filled 1/4 with coffee grounds. Now fill the jar with water. stir the coffee grounds so all of it gets wet. A note is if the coffee is roasted the a few days before you should <em>NOT</em> close the jar since it grounds will release some <code>CO2</code>. Now the hard part is to wait. You should leave it for minimum of 24 hours and up to 48 hours. Store it in the fridge or somewhere cold. After the 24 to 48 hours use the french press to separate the water and coffee grounds. You can now store it in the fridge for up to a week. </p>
]]></content:encoded>
      <dc:date>2015-03-08T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>control temptation @ work</title>
      <link>http://qone.io/temptation/2015/03/04/control-temptation-at-work.html</link>
      <description><![CDATA[So what do i mean with control temptation @ work. When working with development you have to get it to a problem and try to solve it. Doing that requires that you can stay focused on the task in hand to get the most out of it. Lets say you take 10 - 15 min to get it to the right flow. During your day you have email, facebook, online newspapers, chat systems like IRC, HipChat, Skype, colleagues and many others things that can make you get out of your productive flow. The result of this will mean for every time you lose the 10 - 15 min to get in to the productive flow, over and over. And you may end up at the end of that day and realizing that you did not get done with what you wanted. That is not fun for anyone. 
]]></description>
      <pubDate>Wed, 04 Mar 2015 00:00:00 +0100</pubDate>
      <guid>http://qone.io/temptation/2015/03/04/control-temptation-at-work.html</guid>
      <content:encoded><![CDATA[<p>So what do i mean with <code>control temptation @ work</code>. When working with development you have to get it to a problem and try to solve it. Doing that requires that you can stay focused on the task in hand to get the most out of it. Lets say you take 10 - 15 min to get it to the right flow. During your day you have email, facebook, online newspapers, chat systems like <code>IRC</code>, <code>HipChat</code>, <code>Skype</code>, colleagues and many others things that can make you get out of your productive flow. The result of this will mean for every time you lose the 10 - 15 min to get in to the productive flow, over and over. And you may end up at the end of that day and realizing that you did not get done with what you wanted. That is not fun for anyone. </p>

<p>What i have done to solve this for me! Is to have most notifications on my Â´iPhoneÂ´ off like facebook, mail and other applications that may have possible notifications during the day. On my work laptop i have turned off mail notifications since i dont need to check every mail that pops up in the notifications window right away. I have delibretly not signed in and saved my login to facebook and other sites since i will have a hurdle to have to signs in. That will make me think do i really need to check this now NO. You may think what about the colleagues and all the conversations and noise that you have around you. A pair of <code>Bose quietcomfort 15</code> noise canceling headphones will help and take away most of the surounding noise that you may what to get away from to keep focus on the task in hand. </p>

<p>lets end with a good picture that shows that problem well. 
<img src="/imgs/ProgrammerInterrupted.png" alt="Alt text"></p>
]]></content:encoded>
      <dc:date>2015-03-04T00:00:00+01:00</dc:date>
    </item>
    <dc:date>2015-04-24T00:00:00+02:00</dc:date>
  </channel>
</rss>